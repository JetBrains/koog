package ai.koog.prompt.message

import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.jsonObject


/**
 * Represents a message exchanged in a chat with LLM. Messages can be categorized
 * by their type and role, denoting the purpose and source of the message.
 *
 * Represents both a message from LLM and a message to LLM from user or environment.
 */
@Serializable
public sealed interface Message {
    /**
     * The content of the message.
     */
    public val content: String

    /**
     * The role associated with the message.
     */
    public val role: Role

    /**
     * Represents a request message in the chat.
     */
    @Serializable
    public sealed interface Request : Message

    /**
     * Represents a response message in the chat.
     */
    @Serializable
    public sealed interface Response : Message

    /**
     * Defines the role of the message in the chat (e.g., system, user, assistant, tool).
     */
    @Serializable
    public enum class Role {
        /**
         * Role indicating a system message.
         */
        System,

        /**
         * Role for messages generated by the user.
         */
        User,

        /**
         * Role for messages generated by an assistant (e.g., an AI assistant).
         */
        Assistant,

        /**
         * Role for messages related to tools (e.g., tool usage or tool results).
         */
        Tool
    }

    /**
     * Represents a message sent by the user as a request.
     *
     * @property content The content of the user message.
     */
    @Serializable
    public data class User(
        override val content: String
    ) : Request {
        override val role: Role = Role.User
    }

    /**
     * Represents a message generated by the assistant as a response.
     *
     * @property content The content of the assistant's message.
     * @property finishReason The reason the generation stopped here
     */
    @Serializable
    public data class Assistant(
        override val content: String,
        val finishReason: String? = null
    ) : Response {
        override val role: Role = Role.Assistant
    }

    /**
     * Represents messages exchanged with tools, either as calls or results.
     */
    @Serializable
    public sealed interface Tool : Message {
        /**
         * The unique identifier of the tool call.
         */
        public val id: String?

        /**
         * The name of the tool used.
         */
        public val tool: String

        /**
         * Represents a tool call message sent as a response.
         *
         * @property id The unique identifier of the tool call.
         * @property tool The name of the tool being called.
         * @property content The content of the tool call.
         */
        @Serializable
        public data class Call(
            override val id: String?,
            override val tool: String,
            override val content: String
        ) : Tool, Response {
            override val role: Role = Role.Tool

            /**
             * Lazily parses the content of the tool call as a JSON object.
             */
            val contentJson: JsonObject by lazy {
                Json.parseToJsonElement(content).jsonObject
            }
        }

        /**
         * Represents the result of a tool call sent as a request.
         *
         * @property id The unique identifier of the tool result.
         * @property tool The name of the tool that provided the result.
         * @property content The content of the tool result.
         */
        @Serializable
        public data class Result(
            override val id: String?,
            override val tool: String,
            override val content: String
        ) : Tool, Request {
            override val role: Role = Role.Tool
        }
    }

    /**
     * Represents a system-generated message.
     *
     * @property content The content of the system message.
     */
    @Serializable
    public data class System(
        override val content: String
    ) : Request {
        override val role: Role = Role.System
    }
}
