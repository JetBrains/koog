// Klib ABI Dump
// Targets: [js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <ai.jetbrains.code.agents:agents-core>
open annotation class ai.grazie.code.agents.core.annotation/InternalAgentsApi : kotlin/Annotation { // ai.grazie.code.agents.core.annotation/InternalAgentsApi|null[0]
    constructor <init>() // ai.grazie.code.agents.core.annotation/InternalAgentsApi.<init>|<init>(){}[0]
}

open annotation class ai.grazie.code.agents.core.dsl.builder/AIAgentBuilderMarker : kotlin/Annotation { // ai.grazie.code.agents.core.dsl.builder/AIAgentBuilderMarker|null[0]
    constructor <init>() // ai.grazie.code.agents.core.dsl.builder/AIAgentBuilderMarker.<init>|<init>(){}[0]
}

final enum class ai.grazie.code.agents.core.model/AgentServiceErrorType : kotlin/Enum<ai.grazie.code.agents.core.model/AgentServiceErrorType> { // ai.grazie.code.agents.core.model/AgentServiceErrorType|null[0]
    enum entry AGENT_NOT_FOUND // ai.grazie.code.agents.core.model/AgentServiceErrorType.AGENT_NOT_FOUND|null[0]
    enum entry MALFORMED_MESSAGE // ai.grazie.code.agents.core.model/AgentServiceErrorType.MALFORMED_MESSAGE|null[0]
    enum entry UNEXPECTED_ERROR // ai.grazie.code.agents.core.model/AgentServiceErrorType.UNEXPECTED_ERROR|null[0]
    enum entry UNEXPECTED_MESSAGE_TYPE // ai.grazie.code.agents.core.model/AgentServiceErrorType.UNEXPECTED_MESSAGE_TYPE|null[0]

    final val entries // ai.grazie.code.agents.core.model/AgentServiceErrorType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<ai.grazie.code.agents.core.model/AgentServiceErrorType> // ai.grazie.code.agents.core.model/AgentServiceErrorType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): ai.grazie.code.agents.core.model/AgentServiceErrorType // ai.grazie.code.agents.core.model/AgentServiceErrorType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<ai.grazie.code.agents.core.model/AgentServiceErrorType> // ai.grazie.code.agents.core.model/AgentServiceErrorType.values|values#static(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model/AgentServiceErrorType.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model/AgentServiceErrorType> // ai.grazie.code.agents.core.model/AgentServiceErrorType.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model/AgentServiceErrorType.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract fun interface <#A: kotlin/Any> ai.grazie.code.agents.core.feature.handler/AgentContextHandler { // ai.grazie.code.agents.core.feature.handler/AgentContextHandler|null[0]
    abstract fun handle(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase): #A // ai.grazie.code.agents.core.feature.handler/AgentContextHandler.handle|handle(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase){}[0]
}

abstract fun interface <#A: kotlin/Any> ai.grazie.code.agents.core.feature.handler/AgentEnvironmentTransformer { // ai.grazie.code.agents.core.feature.handler/AgentEnvironmentTransformer|null[0]
    abstract fun transform(ai.grazie.code.agents.core.feature.handler/AgentCreateContext<#A>, ai.grazie.code.agents.core.environment/AIAgentEnvironment): ai.grazie.code.agents.core.environment/AIAgentEnvironment // ai.grazie.code.agents.core.feature.handler/AgentEnvironmentTransformer.transform|transform(ai.grazie.code.agents.core.feature.handler.AgentCreateContext<1:0>;ai.grazie.code.agents.core.environment.AIAgentEnvironment){}[0]
}

abstract fun interface <#A: kotlin/Any> ai.grazie.code.agents.core.feature.handler/BeforeAgentStartedHandler { // ai.grazie.code.agents.core.feature.handler/BeforeAgentStartedHandler|null[0]
    abstract suspend fun handle(ai.grazie.code.agents.core.feature.handler/AgentStartContext<#A>) // ai.grazie.code.agents.core.feature.handler/BeforeAgentStartedHandler.handle|handle(ai.grazie.code.agents.core.feature.handler.AgentStartContext<1:0>){}[0]
}

abstract fun interface <#A: kotlin/Any> ai.grazie.code.agents.core.feature.handler/StrategyStartedHandler { // ai.grazie.code.agents.core.feature.handler/StrategyStartedHandler|null[0]
    abstract suspend fun handle(ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext<#A>) // ai.grazie.code.agents.core.feature.handler/StrategyStartedHandler.handle|handle(ai.grazie.code.agents.core.feature.handler.StrategyUpdateContext<1:0>){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/AfterLLMCallHandler { // ai.grazie.code.agents.core.feature.handler/AfterLLMCallHandler|null[0]
    abstract suspend fun handle(kotlin/String) // ai.grazie.code.agents.core.feature.handler/AfterLLMCallHandler.handle|handle(kotlin.String){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/AfterLLMCallWithToolsHandler { // ai.grazie.code.agents.core.feature.handler/AfterLLMCallWithToolsHandler|null[0]
    abstract suspend fun handle(kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response>, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>) // ai.grazie.code.agents.core.feature.handler/AfterLLMCallWithToolsHandler.handle|handle(kotlin.collections.List<ai.jetbrains.code.prompt.message.Message.Response>;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/AfterNodeHandler { // ai.grazie.code.agents.core.feature.handler/AfterNodeHandler|null[0]
    abstract suspend fun handle(ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<*, *>, ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/Any?, kotlin/Any?) // ai.grazie.code.agents.core.feature.handler/AfterNodeHandler.handle|handle(ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<*,*>;ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;kotlin.Any?;kotlin.Any?){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/AgentFinishedHandler { // ai.grazie.code.agents.core.feature.handler/AgentFinishedHandler|null[0]
    abstract suspend fun handle(kotlin/String, kotlin/String?) // ai.grazie.code.agents.core.feature.handler/AgentFinishedHandler.handle|handle(kotlin.String;kotlin.String?){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/AgentRunErrorHandler { // ai.grazie.code.agents.core.feature.handler/AgentRunErrorHandler|null[0]
    abstract suspend fun handle(kotlin/String, kotlin/Throwable) // ai.grazie.code.agents.core.feature.handler/AgentRunErrorHandler.handle|handle(kotlin.String;kotlin.Throwable){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/BeforeLLMCallHandler { // ai.grazie.code.agents.core.feature.handler/BeforeLLMCallHandler|null[0]
    abstract suspend fun handle(ai.jetbrains.code.prompt.dsl/Prompt) // ai.grazie.code.agents.core.feature.handler/BeforeLLMCallHandler.handle|handle(ai.jetbrains.code.prompt.dsl.Prompt){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/BeforeLLMCallWithToolsHandler { // ai.grazie.code.agents.core.feature.handler/BeforeLLMCallWithToolsHandler|null[0]
    abstract suspend fun handle(ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>) // ai.grazie.code.agents.core.feature.handler/BeforeLLMCallWithToolsHandler.handle|handle(ai.jetbrains.code.prompt.dsl.Prompt;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/BeforeNodeHandler { // ai.grazie.code.agents.core.feature.handler/BeforeNodeHandler|null[0]
    abstract suspend fun handle(ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<*, *>, ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/Any?) // ai.grazie.code.agents.core.feature.handler/BeforeNodeHandler.handle|handle(ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<*,*>;ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;kotlin.Any?){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/StrategyFinishedHandler { // ai.grazie.code.agents.core.feature.handler/StrategyFinishedHandler|null[0]
    abstract suspend fun handle(kotlin/String, kotlin/String) // ai.grazie.code.agents.core.feature.handler/StrategyFinishedHandler.handle|handle(kotlin.String;kotlin.String){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/ToolCallFailureHandler { // ai.grazie.code.agents.core.feature.handler/ToolCallFailureHandler|null[0]
    abstract suspend fun handle(ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/Throwable) // ai.grazie.code.agents.core.feature.handler/ToolCallFailureHandler.handle|handle(ai.grazie.code.agents.core.tools.Tool<*,*>;ai.grazie.code.agents.core.tools.Tool.Args;kotlin.Throwable){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/ToolCallHandler { // ai.grazie.code.agents.core.feature.handler/ToolCallHandler|null[0]
    abstract suspend fun handle(ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args) // ai.grazie.code.agents.core.feature.handler/ToolCallHandler.handle|handle(ai.grazie.code.agents.core.tools.Tool<*,*>;ai.grazie.code.agents.core.tools.Tool.Args){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/ToolCallResultHandler { // ai.grazie.code.agents.core.feature.handler/ToolCallResultHandler|null[0]
    abstract suspend fun handle(ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, ai.grazie.code.agents.core.tools/ToolResult?) // ai.grazie.code.agents.core.feature.handler/ToolCallResultHandler.handle|handle(ai.grazie.code.agents.core.tools.Tool<*,*>;ai.grazie.code.agents.core.tools.Tool.Args;ai.grazie.code.agents.core.tools.ToolResult?){}[0]
}

abstract fun interface ai.grazie.code.agents.core.feature.handler/ToolValidationErrorHandler { // ai.grazie.code.agents.core.feature.handler/ToolValidationErrorHandler|null[0]
    abstract suspend fun handle(ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/String) // ai.grazie.code.agents.core.feature.handler/ToolValidationErrorHandler.handle|handle(ai.grazie.code.agents.core.tools.Tool<*,*>;ai.grazie.code.agents.core.tools.Tool.Args;kotlin.String){}[0]
}

abstract interface <#A: ai.grazie.code.agents.local.features.common.config/FeatureConfig, #B: kotlin/Any> ai.grazie.code.agents.core.feature/AIAgentFeature { // ai.grazie.code.agents.core.feature/AIAgentFeature|null[0]
    abstract val key // ai.grazie.code.agents.core.feature/AIAgentFeature.key|{}key[0]
        abstract fun <get-key>(): ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<#B> // ai.grazie.code.agents.core.feature/AIAgentFeature.key.<get-key>|<get-key>(){}[0]

    abstract fun createInitialConfig(): #A // ai.grazie.code.agents.core.feature/AIAgentFeature.createInitialConfig|createInitialConfig(){}[0]
    abstract fun install(#A, ai.grazie.code.agents.core.feature/AIAgentPipeline) // ai.grazie.code.agents.core.feature/AIAgentFeature.install|install(1:0;ai.grazie.code.agents.core.feature.AIAgentPipeline){}[0]
    open fun installUnsafe(kotlin/Any?, ai.grazie.code.agents.core.feature/AIAgentPipeline) // ai.grazie.code.agents.core.feature/AIAgentFeature.installUnsafe|installUnsafe(kotlin.Any?;ai.grazie.code.agents.core.feature.AIAgentPipeline){}[0]
}

abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase { // ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase|null[0]
    abstract fun getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#A, #B> // ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase.getValue|getValue(kotlin.Any?;kotlin.reflect.KProperty<*>){}[0]
}

abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphDelegateBase { // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphDelegateBase|null[0]
    abstract fun getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph<#A, #B> // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphDelegateBase.getValue|getValue(kotlin.Any?;kotlin.reflect.KProperty<*>){}[0]
}

abstract interface <#A: kotlin/Any?> ai.grazie.code.agents.core.dsl.builder/BaseBuilder { // ai.grazie.code.agents.core.dsl.builder/BaseBuilder|null[0]
    abstract fun build(): #A // ai.grazie.code.agents.core.dsl.builder/BaseBuilder.build|build(){}[0]
}

abstract interface ai.grazie.code.agents.core.agent.config/ToolCallDescriber { // ai.grazie.code.agents.core.agent.config/ToolCallDescriber|null[0]
    abstract fun describeToolCall(ai.jetbrains.code.prompt.message/Message.Tool.Call): ai.jetbrains.code.prompt.message/Message // ai.grazie.code.agents.core.agent.config/ToolCallDescriber.describeToolCall|describeToolCall(ai.jetbrains.code.prompt.message.Message.Tool.Call){}[0]
    abstract fun describeToolResult(ai.jetbrains.code.prompt.message/Message.Tool.Result): ai.jetbrains.code.prompt.message/Message // ai.grazie.code.agents.core.agent.config/ToolCallDescriber.describeToolResult|describeToolResult(ai.jetbrains.code.prompt.message.Message.Tool.Result){}[0]

    final object JSON : ai.grazie.code.agents.core.agent.config/ToolCallDescriber { // ai.grazie.code.agents.core.agent.config/ToolCallDescriber.JSON|null[0]
        final fun describeToolCall(ai.jetbrains.code.prompt.message/Message.Tool.Call): ai.jetbrains.code.prompt.message/Message // ai.grazie.code.agents.core.agent.config/ToolCallDescriber.JSON.describeToolCall|describeToolCall(ai.jetbrains.code.prompt.message.Message.Tool.Call){}[0]
        final fun describeToolResult(ai.jetbrains.code.prompt.message/Message.Tool.Result): ai.jetbrains.code.prompt.message/Message // ai.grazie.code.agents.core.agent.config/ToolCallDescriber.JSON.describeToolResult|describeToolResult(ai.jetbrains.code.prompt.message.Message.Tool.Result){}[0]
    }
}

abstract interface ai.grazie.code.agents.core.agent.entity/AIAgentContextBase { // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase|null[0]
    abstract val agentInput // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.agentInput|{}agentInput[0]
        abstract fun <get-agentInput>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.agentInput.<get-agentInput>|<get-agentInput>(){}[0]
    abstract val config // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.config|{}config[0]
        abstract fun <get-config>(): ai.grazie.code.agents.core.agent.config/AIAgentConfig // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.config.<get-config>|<get-config>(){}[0]
    abstract val environment // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.environment|{}environment[0]
        abstract fun <get-environment>(): ai.grazie.code.agents.core.environment/AIAgentEnvironment // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.environment.<get-environment>|<get-environment>(){}[0]
    abstract val llm // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.llm|{}llm[0]
        abstract fun <get-llm>(): ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.llm.<get-llm>|<get-llm>(){}[0]
    abstract val pipeline // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.pipeline|{}pipeline[0]
        abstract fun <get-pipeline>(): ai.grazie.code.agents.core.feature/AIAgentPipeline // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.pipeline.<get-pipeline>|<get-pipeline>(){}[0]
    abstract val sessionUuid // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.sessionUuid|{}sessionUuid[0]
        abstract fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]
    abstract val stateManager // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.stateManager|{}stateManager[0]
        abstract fun <get-stateManager>(): ai.grazie.code.agents.core.agent.entity/AIAgentStateManager // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.stateManager.<get-stateManager>|<get-stateManager>(){}[0]
    abstract val storage // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.storage|{}storage[0]
        abstract fun <get-storage>(): ai.grazie.code.agents.core.agent.entity/AIAgentStorage // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.storage.<get-storage>|<get-storage>(){}[0]
    abstract val strategyId // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.strategyId|{}strategyId[0]
        abstract fun <get-strategyId>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.strategyId.<get-strategyId>|<get-strategyId>(){}[0]

    abstract fun <#A1: kotlin/Any> feature(ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<#A1>): #A1? // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.feature|feature(ai.grazie.code.agents.core.agent.entity.AIAgentStorageKey<0:0>){0§<kotlin.Any>}[0]
    abstract fun <#A1: kotlin/Any> feature(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>): #A1? // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.feature|feature(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>){0§<kotlin.Any>}[0]
    abstract fun copy(ai.grazie.code.agents.core.environment/AIAgentEnvironment? = ..., kotlin/String? = ..., ai.grazie.code.agents.core.agent.config/AIAgentConfig? = ..., ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext? = ..., ai.grazie.code.agents.core.agent.entity/AIAgentStateManager? = ..., ai.grazie.code.agents.core.agent.entity/AIAgentStorage? = ..., ai.grazie.utils.mpp/UUID? = ..., kotlin/String? = ..., ai.grazie.code.agents.core.feature/AIAgentPipeline? = ...): ai.grazie.code.agents.core.agent.entity/AIAgentContextBase // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.copy|copy(ai.grazie.code.agents.core.environment.AIAgentEnvironment?;kotlin.String?;ai.grazie.code.agents.core.agent.config.AIAgentConfig?;ai.grazie.code.agents.core.agent.entity.AIAgentLLMContext?;ai.grazie.code.agents.core.agent.entity.AIAgentStateManager?;ai.grazie.code.agents.core.agent.entity.AIAgentStorage?;ai.grazie.utils.mpp.UUID?;kotlin.String?;ai.grazie.code.agents.core.feature.AIAgentPipeline?){}[0]
    open fun copyWithTools(kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>): ai.grazie.code.agents.core.agent.entity/AIAgentContextBase // ai.grazie.code.agents.core.agent.entity/AIAgentContextBase.copyWithTools|copyWithTools(kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
}

abstract interface ai.grazie.code.agents.core.agent/AIAgentBase { // ai.grazie.code.agents.core.agent/AIAgentBase|null[0]
    abstract suspend fun run(kotlin/String) // ai.grazie.code.agents.core.agent/AIAgentBase.run|run(kotlin.String){}[0]
    abstract suspend fun runAndGetResult(kotlin/String): kotlin/String? // ai.grazie.code.agents.core.agent/AIAgentBase.runAndGetResult|runAndGetResult(kotlin.String){}[0]
}

abstract interface ai.grazie.code.agents.core.environment/AIAgentEnvironment { // ai.grazie.code.agents.core.environment/AIAgentEnvironment|null[0]
    abstract suspend fun executeTools(kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Tool.Call>): kotlin.collections/List<ai.grazie.code.agents.core.environment/ReceivedToolResult> // ai.grazie.code.agents.core.environment/AIAgentEnvironment.executeTools|executeTools(kotlin.collections.List<ai.jetbrains.code.prompt.message.Message.Tool.Call>){}[0]
    abstract suspend fun reportProblem(kotlin/Throwable) // ai.grazie.code.agents.core.environment/AIAgentEnvironment.reportProblem|reportProblem(kotlin.Throwable){}[0]
    abstract suspend fun sendTermination(kotlin/String?) // ai.grazie.code.agents.core.environment/AIAgentEnvironment.sendTermination|sendTermination(kotlin.String?){}[0]
}

abstract interface ai.grazie.code.agents.core.model.agent/AIAgentConfig // ai.grazie.code.agents.core.model.agent/AIAgentConfig|null[0]

sealed interface ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy { // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy|null[0]
    final class AutoSelectForTask : ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy { // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask|null[0]
        constructor <init>(kotlin/String, kotlin/Int = ...) // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.<init>|<init>(kotlin.String;kotlin.Int){}[0]

        final val maxRetries // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.maxRetries|{}maxRetries[0]
            final fun <get-maxRetries>(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.maxRetries.<get-maxRetries>|<get-maxRetries>(){}[0]
        final val subtaskDescription // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.subtaskDescription|{}subtaskDescription[0]
            final fun <get-subtaskDescription>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.subtaskDescription.<get-subtaskDescription>|<get-subtaskDescription>(){}[0]

        final fun component1(): kotlin/String // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.component1|component1(){}[0]
        final fun component2(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/Int = ...): ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.copy|copy(kotlin.String;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.AutoSelectForTask.toString|toString(){}[0]
    }

    final class Tools : ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy { // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools|null[0]
        constructor <init>(kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>) // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools.<init>|<init>(kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]

        final val tools // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools.tools|{}tools[0]
            final fun <get-tools>(): kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor> // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools.tools.<get-tools>|<get-tools>(){}[0]

        final fun component1(): kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor> // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools.component1|component1(){}[0]
        final fun copy(kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor> = ...): ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools.copy|copy(kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.Tools.toString|toString(){}[0]
    }

    final object ALL : ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy { // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.ALL|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.ALL.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.ALL.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.ALL.toString|toString(){}[0]
    }

    final object NONE : ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy { // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.NONE|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.NONE.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.NONE.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy.NONE.toString|toString(){}[0]
    }
}

sealed interface ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage { // ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage|null[0]
    abstract val sessionUuid // ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage.sessionUuid|{}sessionUuid[0]
        abstract fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage> // ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentMessage : ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage { // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentMessage|null[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentMessage> // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentMessage.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentMessage.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent|null[0]
    abstract val agentId // ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent.agentId|{}agentId[0]
        abstract fun <get-agentId>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent.agentId.<get-agentId>|<get-agentId>(){}[0]
    abstract val message // ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent.message|{}message[0]
        abstract fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent.message.<get-message>|<get-message>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage|null[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

sealed interface ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage : ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage|null[0]
    abstract val sessionUuid // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage.sessionUuid|{}sessionUuid[0]
        abstract fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract class <#A: kotlin/Any?, #B: kotlin/Any?> ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase { // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase|null[0]
    abstract val name // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.name.<get-name>|<get-name>(){}[0]

    final var edges // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.edges|{}edges[0]
        final fun <get-edges>(): kotlin.collections/List<ai.grazie.code.agents.core.agent.entity/AIAgentEdge<#B, *>> // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.edges.<get-edges>|<get-edges>(){}[0]

    abstract suspend fun execute(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #A): #B // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.execute|execute(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;1:0){}[0]
    final suspend fun executeUnsafe(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/Any?): kotlin/Any? // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.executeUnsafe|executeUnsafe(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;kotlin.Any?){}[0]
    final suspend fun resolveEdge(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #B): ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge? // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.resolveEdge|resolveEdge(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;1:1){}[0]
    final suspend fun resolveEdgeUnsafe(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/Any?): ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge? // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.resolveEdgeUnsafe|resolveEdgeUnsafe(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;kotlin.Any?){}[0]
    open fun addEdge(ai.grazie.code.agents.core.agent.entity/AIAgentEdge<#B, *>) // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.addEdge|addEdge(ai.grazie.code.agents.core.agent.entity.AIAgentEdge<1:1,*>){}[0]

    final class ResolvedEdge { // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge|null[0]
        constructor <init>(ai.grazie.code.agents.core.agent.entity/AIAgentEdge<*, *>, kotlin/Any?) // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.<init>|<init>(ai.grazie.code.agents.core.agent.entity.AIAgentEdge<*,*>;kotlin.Any?){}[0]

        final val edge // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.edge|{}edge[0]
            final fun <get-edge>(): ai.grazie.code.agents.core.agent.entity/AIAgentEdge<*, *> // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.edge.<get-edge>|<get-edge>(){}[0]
        final val output // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.output|{}output[0]
            final fun <get-output>(): kotlin/Any? // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.output.<get-output>|<get-output>(){}[0]

        final fun component1(): ai.grazie.code.agents.core.agent.entity/AIAgentEdge<*, *> // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.component1|component1(){}[0]
        final fun component2(): kotlin/Any? // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.component2|component2(){}[0]
        final fun copy(ai.grazie.code.agents.core.agent.entity/AIAgentEdge<*, *> = ..., kotlin/Any? = ...): ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.copy|copy(ai.grazie.code.agents.core.agent.entity.AIAgentEdge<*,*>;kotlin.Any?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase.ResolvedEdge.toString|toString(){}[0]
    }
}

abstract class <#A: kotlin/Any?, #B: kotlin/Any?> ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase { // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase|null[0]
    constructor <init>() // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.<init>|<init>(){}[0]

    abstract val nodeFinish // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.nodeFinish|{}nodeFinish[0]
        abstract fun <get-nodeFinish>(): ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase<#B> // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.nodeFinish.<get-nodeFinish>|<get-nodeFinish>(){}[0]
    abstract val nodeStart // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.nodeStart|{}nodeStart[0]
        abstract fun <get-nodeStart>(): ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase<#A> // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.nodeStart.<get-nodeStart>|<get-nodeStart>(){}[0]

    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?> (ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#A1, #B1>).then(ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#B1, #C1>): ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#B1, #C1> // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.then|then@ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<0:0,0:1>(ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> edge(ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A1, #B1, #B1>) // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.edge|edge(ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> node(kotlin/String? = ..., kotlin.coroutines/SuspendFunction2<ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #A1, #B1>): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<#A1, #B1> // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.node|node(kotlin.String?;kotlin.coroutines.SuspendFunction2<ai.grazie.code.agents.core.agent.entity.AIAgentContextBase,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> subgraph(kotlin/String? = ..., ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy = ..., kotlin/Function1<ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<#A1, #B1>, kotlin/Unit>): ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphDelegateBase<#A1, #B1> // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.subgraph|subgraph(kotlin.String?;ai.grazie.code.agents.core.agent.entity.ToolSelectionStrategy;kotlin.Function1<ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> subgraph(kotlin/String? = ..., kotlin.collections/List<ai.grazie.code.agents.core.tools/Tool<*, *>>, kotlin/Function1<ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<#A1, #B1>, kotlin/Unit>): ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphDelegateBase<#A1, #B1> // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.subgraph|subgraph(kotlin.String?;kotlin.collections.List<ai.grazie.code.agents.core.tools.Tool<*,*>>;kotlin.Function1<ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun isFinishReachable(ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase<#A>): kotlin/Boolean // ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase.isFinishReachable|isFinishReachable(ai.grazie.code.agents.core.agent.entity.StartAIAgentNodeBase<1:0>){}[0]
}

abstract class ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy { // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy|null[0]
    constructor <init>(ai.grazie.code.agents.core.agent.config/ToolCallDescriber) // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.<init>|<init>(ai.grazie.code.agents.core.agent.config.ToolCallDescriber){}[0]

    abstract fun convertPrompt(ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>): ai.jetbrains.code.prompt.dsl/Prompt // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.convertPrompt|convertPrompt(ai.jetbrains.code.prompt.dsl.Prompt;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    final fun convertMessage(ai.jetbrains.code.prompt.message/Message): ai.jetbrains.code.prompt.message/Message // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.convertMessage|convertMessage(ai.jetbrains.code.prompt.message.Message){}[0]

    final class All : ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy { // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.All|null[0]
        constructor <init>(ai.grazie.code.agents.core.agent.config/ToolCallDescriber) // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.All.<init>|<init>(ai.grazie.code.agents.core.agent.config.ToolCallDescriber){}[0]

        final fun convertPrompt(ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>): ai.jetbrains.code.prompt.dsl/Prompt // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.All.convertPrompt|convertPrompt(ai.jetbrains.code.prompt.dsl.Prompt;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    }

    final class Missing : ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy { // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.Missing|null[0]
        constructor <init>(ai.grazie.code.agents.core.agent.config/ToolCallDescriber) // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.Missing.<init>|<init>(ai.grazie.code.agents.core.agent.config.ToolCallDescriber){}[0]

        final fun convertPrompt(ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>): ai.jetbrains.code.prompt.dsl/Prompt // ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy.Missing.convertPrompt|convertPrompt(ai.jetbrains.code.prompt.dsl.Prompt;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    }
}

abstract class ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy { // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy|null[0]
    constructor <init>() // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.<init>|<init>(){}[0]

    abstract suspend fun compress(ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession, kotlin/Boolean, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message>) // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.compress|compress(ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession;kotlin.Boolean;kotlin.collections.List<ai.jetbrains.code.prompt.message.Message>){}[0]
    final fun composePromptWithRequiredMessages(ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response>, kotlin/Boolean, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message>) // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.composePromptWithRequiredMessages|composePromptWithRequiredMessages(ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession;kotlin.collections.List<ai.jetbrains.code.prompt.message.Message.Response>;kotlin.Boolean;kotlin.collections.List<ai.jetbrains.code.prompt.message.Message>){}[0]
    final suspend fun compressPromptIntoTLDR(ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession): kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.compressPromptIntoTLDR|compressPromptIntoTLDR(ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession){}[0]

    final class Chunked : ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy { // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked|null[0]
        constructor <init>(kotlin/Int) // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.<init>|<init>(kotlin.Int){}[0]

        final val chunkSize // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.chunkSize|{}chunkSize[0]
            final fun <get-chunkSize>(): kotlin/Int // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.chunkSize.<get-chunkSize>|<get-chunkSize>(){}[0]

        final fun component1(): kotlin/Int // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.component1|component1(){}[0]
        final fun copy(kotlin/Int = ...): ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.copy|copy(kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.toString|toString(){}[0]
        final suspend fun compress(ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession, kotlin/Boolean, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message>) // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.Chunked.compress|compress(ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession;kotlin.Boolean;kotlin.collections.List<ai.jetbrains.code.prompt.message.Message>){}[0]
    }

    final class FromLastNMessages : ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy { // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages|null[0]
        constructor <init>(kotlin/Int) // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.<init>|<init>(kotlin.Int){}[0]

        final val n // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.n|{}n[0]
            final fun <get-n>(): kotlin/Int // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.n.<get-n>|<get-n>(){}[0]

        final fun component1(): kotlin/Int // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.component1|component1(){}[0]
        final fun copy(kotlin/Int = ...): ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.copy|copy(kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.toString|toString(){}[0]
        final suspend fun compress(ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession, kotlin/Boolean, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message>) // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.FromLastNMessages.compress|compress(ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession;kotlin.Boolean;kotlin.collections.List<ai.jetbrains.code.prompt.message.Message>){}[0]
    }

    final object WholeHistory : ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy { // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.WholeHistory|null[0]
        final suspend fun compress(ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession, kotlin/Boolean, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message>) // ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy.WholeHistory.compress|compress(ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession;kotlin.Boolean;kotlin.collections.List<ai.jetbrains.code.prompt.message.Message>){}[0]
    }
}

abstract class ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent : ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent { // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent|null[0]
    constructor <init>() // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.<init>|<init>(){}[0]
    constructor <init>(kotlin/Int, kotlinx.serialization.internal/SerializationConstructorMarker?) // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.<init>|<init>(kotlin.Int;kotlinx.serialization.internal.SerializationConstructorMarker?){}[0]

    abstract val agentId // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.agentId|{}agentId[0]
        abstract fun <get-agentId>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.agentId.<get-agentId>|<get-agentId>(){}[0]
    abstract val message // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.message|{}message[0]
        abstract fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.message.<get-message>|<get-message>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent> // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract class ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage : ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage { // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage|null[0]
    constructor <init>() // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage.<init>|<init>(){}[0]
    constructor <init>(kotlin/Int, kotlinx.serialization.internal/SerializationConstructorMarker?) // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage.<init>|<init>(kotlin.Int;kotlinx.serialization.internal.SerializationConstructorMarker?){}[0]

    abstract val content // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage.content|{}content[0]
        abstract fun <get-content>(): ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage.content.<get-content>|<get-content>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage> // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

abstract class ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent : ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent|null[0]
    constructor <init>() // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.<init>|<init>(){}[0]
    constructor <init>(kotlin/Int, kotlinx.serialization.internal/SerializationConstructorMarker?) // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.<init>|<init>(kotlin.Int;kotlinx.serialization.internal.SerializationConstructorMarker?){}[0]

    abstract val agentId // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.agentId|{}agentId[0]
        abstract fun <get-agentId>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.agentId.<get-agentId>|<get-agentId>(){}[0]
    abstract val message // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.message|{}message[0]
        abstract fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.message.<get-message>|<get-message>(){}[0]
    abstract val toolCallId // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.toolCallId|{}toolCallId[0]
        abstract fun <get-toolCallId>(): kotlin/String? // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.toolCallId.<get-toolCallId>|<get-toolCallId>(){}[0]
    abstract val toolName // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.toolName|{}toolName[0]
        abstract fun <get-toolName>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.toolName.<get-toolName>|<get-toolName>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final class <#A: ai.grazie.code.agents.core.tools/Tool.Args, #B: ai.grazie.code.agents.core.tools/ToolResult> ai.grazie.code.agents.core.environment/SafeTool { // ai.grazie.code.agents.core.environment/SafeTool|null[0]
    constructor <init>(ai.grazie.code.agents.core.tools/Tool<#A, #B>, ai.grazie.code.agents.core.environment/AIAgentEnvironment) // ai.grazie.code.agents.core.environment/SafeTool.<init>|<init>(ai.grazie.code.agents.core.tools.Tool<1:0,1:1>;ai.grazie.code.agents.core.environment.AIAgentEnvironment){}[0]

    final fun copy(ai.grazie.code.agents.core.tools/Tool<#A, #B> = ..., ai.grazie.code.agents.core.environment/AIAgentEnvironment = ...): ai.grazie.code.agents.core.environment/SafeTool<#A, #B> // ai.grazie.code.agents.core.environment/SafeTool.copy|copy(ai.grazie.code.agents.core.tools.Tool<1:0,1:1>;ai.grazie.code.agents.core.environment.AIAgentEnvironment){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.environment/SafeTool.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.environment/SafeTool.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.toString|toString(){}[0]
    final suspend fun execute(#A): ai.grazie.code.agents.core.environment/SafeTool.Result<#B> // ai.grazie.code.agents.core.environment/SafeTool.execute|execute(1:0){}[0]
    final suspend fun executeRaw(#A): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.executeRaw|executeRaw(1:0){}[0]
    final suspend fun executeUnsafe(ai.grazie.code.agents.core.tools/Tool.Args): ai.grazie.code.agents.core.environment/SafeTool.Result<#B> // ai.grazie.code.agents.core.environment/SafeTool.executeUnsafe|executeUnsafe(ai.grazie.code.agents.core.tools.Tool.Args){}[0]

    sealed interface <#A1: ai.grazie.code.agents.core.tools/ToolResult> Result { // ai.grazie.code.agents.core.environment/SafeTool.Result|null[0]
        abstract val content // ai.grazie.code.agents.core.environment/SafeTool.Result.content|{}content[0]
            abstract fun <get-content>(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.Result.content.<get-content>|<get-content>(){}[0]

        open fun asFailure(): ai.grazie.code.agents.core.environment/SafeTool.Result.Failure<#A1> // ai.grazie.code.agents.core.environment/SafeTool.Result.asFailure|asFailure(){}[0]
        open fun asSuccessful(): ai.grazie.code.agents.core.environment/SafeTool.Result.Success<#A1> // ai.grazie.code.agents.core.environment/SafeTool.Result.asSuccessful|asSuccessful(){}[0]
        open fun isFailure(): kotlin/Boolean // ai.grazie.code.agents.core.environment/SafeTool.Result.isFailure|isFailure(){}[0]
        open fun isSuccessful(): kotlin/Boolean // ai.grazie.code.agents.core.environment/SafeTool.Result.isSuccessful|isSuccessful(){}[0]

        final class <#A2: ai.grazie.code.agents.core.tools/ToolResult> Failure : ai.grazie.code.agents.core.environment/SafeTool.Result<#A2> { // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure|null[0]
            constructor <init>(kotlin/String) // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.<init>|<init>(kotlin.String){}[0]

            final val content // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.content|{}content[0]
                final fun <get-content>(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.content.<get-content>|<get-content>(){}[0]
            final val message // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.message|{}message[0]
                final fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.message.<get-message>|<get-message>(){}[0]

            final fun component1(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.component1|component1(){}[0]
            final fun copy(kotlin/String = ...): ai.grazie.code.agents.core.environment/SafeTool.Result.Failure<#A2> // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.copy|copy(kotlin.String){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.Result.Failure.toString|toString(){}[0]
        }

        final class <#A2: ai.grazie.code.agents.core.tools/ToolResult> Success : ai.grazie.code.agents.core.environment/SafeTool.Result<#A2> { // ai.grazie.code.agents.core.environment/SafeTool.Result.Success|null[0]
            constructor <init>(#A2, kotlin/String) // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.<init>|<init>(1:0;kotlin.String){}[0]

            final val content // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.content|{}content[0]
                final fun <get-content>(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.content.<get-content>|<get-content>(){}[0]
            final val result // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.result|{}result[0]
                final fun <get-result>(): #A2 // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.result.<get-result>|<get-result>(){}[0]

            final fun component1(): #A2 // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.component1|component1(){}[0]
            final fun component2(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.component2|component2(){}[0]
            final fun copy(#A2 = ..., kotlin/String = ...): ai.grazie.code.agents.core.environment/SafeTool.Result.Success<#A2> // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.copy|copy(1:0;kotlin.String){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // ai.grazie.code.agents.core.environment/SafeTool.Result.Success.toString|toString(){}[0]
        }
    }
}

final class <#A: kotlin/Any> ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey { // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey|null[0]
    constructor <init>(kotlin/String) // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey.<init>|<init>(kotlin.String){}[0]

    final val name // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey.name|{}name[0]
        final fun <get-name>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey.name.<get-name>|<get-name>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<#A> // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey.toString|toString(){}[0]
}

final class <#A: kotlin/Any> ai.grazie.code.agents.core.feature.handler/AgentHandler { // ai.grazie.code.agents.core.feature.handler/AgentHandler|null[0]
    constructor <init>(#A) // ai.grazie.code.agents.core.feature.handler/AgentHandler.<init>|<init>(1:0){}[0]

    final val feature // ai.grazie.code.agents.core.feature.handler/AgentHandler.feature|{}feature[0]
        final fun <get-feature>(): #A // ai.grazie.code.agents.core.feature.handler/AgentHandler.feature.<get-feature>|<get-feature>(){}[0]

    final var agentFinishedHandler // ai.grazie.code.agents.core.feature.handler/AgentHandler.agentFinishedHandler|{}agentFinishedHandler[0]
        final fun <get-agentFinishedHandler>(): ai.grazie.code.agents.core.feature.handler/AgentFinishedHandler // ai.grazie.code.agents.core.feature.handler/AgentHandler.agentFinishedHandler.<get-agentFinishedHandler>|<get-agentFinishedHandler>(){}[0]
        final fun <set-agentFinishedHandler>(ai.grazie.code.agents.core.feature.handler/AgentFinishedHandler) // ai.grazie.code.agents.core.feature.handler/AgentHandler.agentFinishedHandler.<set-agentFinishedHandler>|<set-agentFinishedHandler>(ai.grazie.code.agents.core.feature.handler.AgentFinishedHandler){}[0]
    final var agentRunErrorHandler // ai.grazie.code.agents.core.feature.handler/AgentHandler.agentRunErrorHandler|{}agentRunErrorHandler[0]
        final fun <get-agentRunErrorHandler>(): ai.grazie.code.agents.core.feature.handler/AgentRunErrorHandler // ai.grazie.code.agents.core.feature.handler/AgentHandler.agentRunErrorHandler.<get-agentRunErrorHandler>|<get-agentRunErrorHandler>(){}[0]
        final fun <set-agentRunErrorHandler>(ai.grazie.code.agents.core.feature.handler/AgentRunErrorHandler) // ai.grazie.code.agents.core.feature.handler/AgentHandler.agentRunErrorHandler.<set-agentRunErrorHandler>|<set-agentRunErrorHandler>(ai.grazie.code.agents.core.feature.handler.AgentRunErrorHandler){}[0]
    final var beforeAgentStartedHandler // ai.grazie.code.agents.core.feature.handler/AgentHandler.beforeAgentStartedHandler|{}beforeAgentStartedHandler[0]
        final fun <get-beforeAgentStartedHandler>(): ai.grazie.code.agents.core.feature.handler/BeforeAgentStartedHandler<#A> // ai.grazie.code.agents.core.feature.handler/AgentHandler.beforeAgentStartedHandler.<get-beforeAgentStartedHandler>|<get-beforeAgentStartedHandler>(){}[0]
        final fun <set-beforeAgentStartedHandler>(ai.grazie.code.agents.core.feature.handler/BeforeAgentStartedHandler<#A>) // ai.grazie.code.agents.core.feature.handler/AgentHandler.beforeAgentStartedHandler.<set-beforeAgentStartedHandler>|<set-beforeAgentStartedHandler>(ai.grazie.code.agents.core.feature.handler.BeforeAgentStartedHandler<1:0>){}[0]
    final var environmentTransformer // ai.grazie.code.agents.core.feature.handler/AgentHandler.environmentTransformer|{}environmentTransformer[0]
        final fun <get-environmentTransformer>(): ai.grazie.code.agents.core.feature.handler/AgentEnvironmentTransformer<#A> // ai.grazie.code.agents.core.feature.handler/AgentHandler.environmentTransformer.<get-environmentTransformer>|<get-environmentTransformer>(){}[0]
        final fun <set-environmentTransformer>(ai.grazie.code.agents.core.feature.handler/AgentEnvironmentTransformer<#A>) // ai.grazie.code.agents.core.feature.handler/AgentHandler.environmentTransformer.<set-environmentTransformer>|<set-environmentTransformer>(ai.grazie.code.agents.core.feature.handler.AgentEnvironmentTransformer<1:0>){}[0]

    final fun transformEnvironment(ai.grazie.code.agents.core.feature.handler/AgentCreateContext<#A>, ai.grazie.code.agents.core.environment/AIAgentEnvironment): ai.grazie.code.agents.core.environment/AIAgentEnvironment // ai.grazie.code.agents.core.feature.handler/AgentHandler.transformEnvironment|transformEnvironment(ai.grazie.code.agents.core.feature.handler.AgentCreateContext<1:0>;ai.grazie.code.agents.core.environment.AIAgentEnvironment){}[0]
    final suspend fun handleBeforeAgentStarted(ai.grazie.code.agents.core.feature.handler/AgentStartContext<#A>) // ai.grazie.code.agents.core.feature.handler/AgentHandler.handleBeforeAgentStarted|handleBeforeAgentStarted(ai.grazie.code.agents.core.feature.handler.AgentStartContext<1:0>){}[0]
    final suspend fun handleBeforeAgentStartedUnsafe(ai.grazie.code.agents.core.feature.handler/AgentStartContext<*>) // ai.grazie.code.agents.core.feature.handler/AgentHandler.handleBeforeAgentStartedUnsafe|handleBeforeAgentStartedUnsafe(ai.grazie.code.agents.core.feature.handler.AgentStartContext<*>){}[0]
}

final class <#A: kotlin/Any> ai.grazie.code.agents.core.feature.handler/StrategyHandler { // ai.grazie.code.agents.core.feature.handler/StrategyHandler|null[0]
    constructor <init>(#A) // ai.grazie.code.agents.core.feature.handler/StrategyHandler.<init>|<init>(1:0){}[0]

    final val feature // ai.grazie.code.agents.core.feature.handler/StrategyHandler.feature|{}feature[0]
        final fun <get-feature>(): #A // ai.grazie.code.agents.core.feature.handler/StrategyHandler.feature.<get-feature>|<get-feature>(){}[0]

    final var strategyFinishedHandler // ai.grazie.code.agents.core.feature.handler/StrategyHandler.strategyFinishedHandler|{}strategyFinishedHandler[0]
        final fun <get-strategyFinishedHandler>(): ai.grazie.code.agents.core.feature.handler/StrategyFinishedHandler // ai.grazie.code.agents.core.feature.handler/StrategyHandler.strategyFinishedHandler.<get-strategyFinishedHandler>|<get-strategyFinishedHandler>(){}[0]
        final fun <set-strategyFinishedHandler>(ai.grazie.code.agents.core.feature.handler/StrategyFinishedHandler) // ai.grazie.code.agents.core.feature.handler/StrategyHandler.strategyFinishedHandler.<set-strategyFinishedHandler>|<set-strategyFinishedHandler>(ai.grazie.code.agents.core.feature.handler.StrategyFinishedHandler){}[0]
    final var strategyStartedHandler // ai.grazie.code.agents.core.feature.handler/StrategyHandler.strategyStartedHandler|{}strategyStartedHandler[0]
        final fun <get-strategyStartedHandler>(): ai.grazie.code.agents.core.feature.handler/StrategyStartedHandler<#A> // ai.grazie.code.agents.core.feature.handler/StrategyHandler.strategyStartedHandler.<get-strategyStartedHandler>|<get-strategyStartedHandler>(){}[0]
        final fun <set-strategyStartedHandler>(ai.grazie.code.agents.core.feature.handler/StrategyStartedHandler<#A>) // ai.grazie.code.agents.core.feature.handler/StrategyHandler.strategyStartedHandler.<set-strategyStartedHandler>|<set-strategyStartedHandler>(ai.grazie.code.agents.core.feature.handler.StrategyStartedHandler<1:0>){}[0]

    final suspend fun handleStrategyStarted(ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext<#A>) // ai.grazie.code.agents.core.feature.handler/StrategyHandler.handleStrategyStarted|handleStrategyStarted(ai.grazie.code.agents.core.feature.handler.StrategyUpdateContext<1:0>){}[0]
    final suspend fun handleStrategyStartedUnsafe(ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext<*>) // ai.grazie.code.agents.core.feature.handler/StrategyHandler.handleStrategyStartedUnsafe|handleStrategyStartedUnsafe(ai.grazie.code.agents.core.feature.handler.StrategyUpdateContext<*>){}[0]
}

final class <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate { // ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate|null[0]
    final fun <#A1: kotlin/Any?> transformed(kotlin.coroutines/SuspendFunction2<ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #B, #A1>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #A1, #C> // ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate.transformed|transformed(kotlin.coroutines.SuspendFunction2<ai.grazie.code.agents.core.agent.entity.AIAgentContextBase,1:1,0:0>){0§<kotlin.Any?>}[0]
    final fun onCondition(kotlin.coroutines/SuspendFunction2<ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #B, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C> // ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate.onCondition|onCondition(kotlin.coroutines.SuspendFunction2<ai.grazie.code.agents.core.agent.entity.AIAgentContextBase,1:1,kotlin.Boolean>){}[0]
}

final class <#A: kotlin/Any?, #B: kotlin/Any?> ai.grazie.code.agents.core.agent.entity/AIAgentEdge { // ai.grazie.code.agents.core.agent.entity/AIAgentEdge|null[0]
    final val toNode // ai.grazie.code.agents.core.agent.entity/AIAgentEdge.toNode|{}toNode[0]
        final fun <get-toNode>(): ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#B, *> // ai.grazie.code.agents.core.agent.entity/AIAgentEdge.toNode.<get-toNode>|<get-toNode>(){}[0]
}

final class <#A: kotlin/Any?, #B: kotlin/Any?> ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilder : ai.grazie.code.agents.core.dsl.builder/BaseBuilder<ai.grazie.code.agents.core.agent.entity/AIAgentEdge<#A, #B>> { // ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilder|null[0]
    final fun build(): ai.grazie.code.agents.core.agent.entity/AIAgentEdge<#A, #B> // ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilder.build|build(){}[0]
}

final class <#A: kotlin/Any?> ai.grazie.code.agents.core.feature.handler/AgentCreateContext { // ai.grazie.code.agents.core.feature.handler/AgentCreateContext|null[0]
    constructor <init>(ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, ai.grazie.code.agents.core.agent/AIAgent, #A) // ai.grazie.code.agents.core.feature.handler/AgentCreateContext.<init>|<init>(ai.grazie.code.agents.core.agent.entity.AIAgentStrategy;ai.grazie.code.agents.core.agent.AIAgent;1:0){}[0]

    final val agent // ai.grazie.code.agents.core.feature.handler/AgentCreateContext.agent|{}agent[0]
        final fun <get-agent>(): ai.grazie.code.agents.core.agent/AIAgent // ai.grazie.code.agents.core.feature.handler/AgentCreateContext.agent.<get-agent>|<get-agent>(){}[0]
    final val feature // ai.grazie.code.agents.core.feature.handler/AgentCreateContext.feature|{}feature[0]
        final fun <get-feature>(): #A // ai.grazie.code.agents.core.feature.handler/AgentCreateContext.feature.<get-feature>|<get-feature>(){}[0]
    final val strategy // ai.grazie.code.agents.core.feature.handler/AgentCreateContext.strategy|{}strategy[0]
        final fun <get-strategy>(): ai.grazie.code.agents.core.agent.entity/AIAgentStrategy // ai.grazie.code.agents.core.feature.handler/AgentCreateContext.strategy.<get-strategy>|<get-strategy>(){}[0]

    final suspend fun readStrategy(kotlin.coroutines/SuspendFunction1<ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, kotlin/Unit>) // ai.grazie.code.agents.core.feature.handler/AgentCreateContext.readStrategy|readStrategy(kotlin.coroutines.SuspendFunction1<ai.grazie.code.agents.core.agent.entity.AIAgentStrategy,kotlin.Unit>){}[0]
}

final class <#A: kotlin/Any?> ai.grazie.code.agents.core.feature.handler/AgentStartContext { // ai.grazie.code.agents.core.feature.handler/AgentStartContext|null[0]
    constructor <init>(ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, ai.grazie.code.agents.core.agent/AIAgent, #A) // ai.grazie.code.agents.core.feature.handler/AgentStartContext.<init>|<init>(ai.grazie.code.agents.core.agent.entity.AIAgentStrategy;ai.grazie.code.agents.core.agent.AIAgent;1:0){}[0]

    final val agent // ai.grazie.code.agents.core.feature.handler/AgentStartContext.agent|{}agent[0]
        final fun <get-agent>(): ai.grazie.code.agents.core.agent/AIAgent // ai.grazie.code.agents.core.feature.handler/AgentStartContext.agent.<get-agent>|<get-agent>(){}[0]
    final val feature // ai.grazie.code.agents.core.feature.handler/AgentStartContext.feature|{}feature[0]
        final fun <get-feature>(): #A // ai.grazie.code.agents.core.feature.handler/AgentStartContext.feature.<get-feature>|<get-feature>(){}[0]
    final val strategy // ai.grazie.code.agents.core.feature.handler/AgentStartContext.strategy|{}strategy[0]
        final fun <get-strategy>(): ai.grazie.code.agents.core.agent.entity/AIAgentStrategy // ai.grazie.code.agents.core.feature.handler/AgentStartContext.strategy.<get-strategy>|<get-strategy>(){}[0]

    final suspend fun readStrategy(kotlin.coroutines/SuspendFunction1<ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, kotlin/Unit>) // ai.grazie.code.agents.core.feature.handler/AgentStartContext.readStrategy|readStrategy(kotlin.coroutines.SuspendFunction1<ai.grazie.code.agents.core.agent.entity.AIAgentStrategy,kotlin.Unit>){}[0]
}

final class <#A: kotlin/Any?> ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext { // ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext|null[0]
    constructor <init>(ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, #A) // ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext.<init>|<init>(ai.grazie.code.agents.core.agent.entity.AIAgentStrategy;1:0){}[0]

    final val feature // ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext.feature|{}feature[0]
        final fun <get-feature>(): #A // ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext.feature.<get-feature>|<get-feature>(){}[0]
    final val strategy // ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext.strategy|{}strategy[0]
        final fun <get-strategy>(): ai.grazie.code.agents.core.agent.entity/AIAgentStrategy // ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext.strategy.<get-strategy>|<get-strategy>(){}[0]

    final suspend fun readStrategy(kotlin.coroutines/SuspendFunction1<ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, kotlin/Unit>) // ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext.readStrategy|readStrategy(kotlin.coroutines.SuspendFunction1<ai.grazie.code.agents.core.agent.entity.AIAgentStrategy,kotlin.Unit>){}[0]
}

final class ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext { // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext|null[0]
    constructor <init>(kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>, ai.grazie.code.agents.core.tools/ToolRegistry = ..., ai.jetbrains.code.prompt.dsl/Prompt, ai.jetbrains.code.prompt.llm/LLModel, ai.jetbrains.code.prompt.executor.model/PromptExecutor, ai.grazie.code.agents.core.environment/AIAgentEnvironment, ai.grazie.code.agents.core.agent.config/AIAgentConfig) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.<init>|<init>(kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>;ai.grazie.code.agents.core.tools.ToolRegistry;ai.jetbrains.code.prompt.dsl.Prompt;ai.jetbrains.code.prompt.llm.LLModel;ai.jetbrains.code.prompt.executor.model.PromptExecutor;ai.grazie.code.agents.core.environment.AIAgentEnvironment;ai.grazie.code.agents.core.agent.config.AIAgentConfig){}[0]

    final val toolRegistry // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.toolRegistry|{}toolRegistry[0]
        final fun <get-toolRegistry>(): ai.grazie.code.agents.core.tools/ToolRegistry // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.toolRegistry.<get-toolRegistry>|<get-toolRegistry>(){}[0]

    final fun component2(): ai.grazie.code.agents.core.tools/ToolRegistry // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor> = ..., ai.grazie.code.agents.core.tools/ToolRegistry = ..., ai.jetbrains.code.prompt.dsl/Prompt = ..., ai.jetbrains.code.prompt.llm/LLModel = ..., ai.jetbrains.code.prompt.executor.model/PromptExecutor = ..., ai.grazie.code.agents.core.environment/AIAgentEnvironment = ..., ai.grazie.code.agents.core.agent.config/AIAgentConfig = ...): ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.copy|copy(kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>;ai.grazie.code.agents.core.tools.ToolRegistry;ai.jetbrains.code.prompt.dsl.Prompt;ai.jetbrains.code.prompt.llm.LLModel;ai.jetbrains.code.prompt.executor.model.PromptExecutor;ai.grazie.code.agents.core.environment.AIAgentEnvironment;ai.grazie.code.agents.core.agent.config.AIAgentConfig){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.toString|toString(){}[0]
    final suspend fun <#A1: kotlin/Any?> readSession(kotlin.coroutines/SuspendFunction1<ai.grazie.code.agents.core.agent.entity/AIAgentLLMReadSession, #A1>): #A1 // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.readSession|readSession(kotlin.coroutines.SuspendFunction1<ai.grazie.code.agents.core.agent.entity.AIAgentLLMReadSession,0:0>){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> writeSession(kotlin.coroutines/SuspendFunction1<ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession, #A1>): #A1 // ai.grazie.code.agents.core.agent.entity/AIAgentLLMContext.writeSession|writeSession(kotlin.coroutines.SuspendFunction1<ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession,0:0>){0§<kotlin.Any?>}[0]
}

final class ai.grazie.code.agents.core.agent.entity/AIAgentLLMReadSession : ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession // ai.grazie.code.agents.core.agent.entity/AIAgentLLMReadSession|null[0]

final class ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession : ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession { // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession|null[0]
    final val environment // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.environment|{}environment[0]
        final fun <get-environment>(): ai.grazie.code.agents.core.environment/AIAgentEnvironment // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.environment.<get-environment>|<get-environment>(){}[0]
    final val toolRegistry // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.toolRegistry|{}toolRegistry[0]
        final fun <get-toolRegistry>(): ai.grazie.code.agents.core.tools/ToolRegistry // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.toolRegistry.<get-toolRegistry>|<get-toolRegistry>(){}[0]

    final var model // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.model|{}model[0]
        final fun <get-model>(): ai.jetbrains.code.prompt.llm/LLModel // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.model.<get-model>|<get-model>(){}[0]
        final fun <set-model>(ai.jetbrains.code.prompt.llm/LLModel) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.model.<set-model>|<set-model>(ai.jetbrains.code.prompt.llm.LLModel){}[0]
    final var prompt // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.prompt|{}prompt[0]
        final fun <get-prompt>(): ai.jetbrains.code.prompt.dsl/Prompt // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.prompt.<get-prompt>|<get-prompt>(){}[0]
        final fun <set-prompt>(ai.jetbrains.code.prompt.dsl/Prompt) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.prompt.<set-prompt>|<set-prompt>(ai.jetbrains.code.prompt.dsl.Prompt){}[0]
    final var tools // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.tools|{}tools[0]
        final fun <get-tools>(): kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.tools.<get-tools>|<get-tools>(){}[0]
        final fun <set-tools>(kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.tools.<set-tools>|<set-tools>(kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]

    final fun changeLLMParams(ai.jetbrains.code.prompt.params/LLMParams) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.changeLLMParams|changeLLMParams(ai.jetbrains.code.prompt.params.LLMParams){}[0]
    final fun changeModel(ai.jetbrains.code.prompt.llm/LLModel) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.changeModel|changeModel(ai.jetbrains.code.prompt.llm.LLModel){}[0]
    final fun rewritePrompt(kotlin/Function1<ai.jetbrains.code.prompt.dsl/Prompt, ai.jetbrains.code.prompt.dsl/Prompt>) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.rewritePrompt|rewritePrompt(kotlin.Function1<ai.jetbrains.code.prompt.dsl.Prompt,ai.jetbrains.code.prompt.dsl.Prompt>){}[0]
    final fun updatePrompt(kotlin/Function1<ai.jetbrains.code.prompt.dsl/PromptBuilder, kotlin/Unit>) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.updatePrompt|updatePrompt(kotlin.Function1<ai.jetbrains.code.prompt.dsl.PromptBuilder,kotlin.Unit>){}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> (kotlinx.coroutines.flow/Flow<#A1>).toParallelToolCalls(ai.grazie.code.agents.core.environment/SafeTool<#A1, #B1>, kotlin/Int = ...): kotlinx.coroutines.flow/Flow<ai.grazie.code.agents.core.environment/SafeTool.Result<#B1>> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.toParallelToolCalls|toParallelToolCalls@kotlinx.coroutines.flow.Flow<0:0>(ai.grazie.code.agents.core.environment.SafeTool<0:0,0:1>;kotlin.Int){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> (kotlinx.coroutines.flow/Flow<#A1>).toParallelToolCalls(ai.grazie.code.agents.core.tools/Tool<#A1, #B1>, kotlin/Int = ...): kotlinx.coroutines.flow/Flow<ai.grazie.code.agents.core.environment/SafeTool.Result<#B1>> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.toParallelToolCalls|toParallelToolCalls@kotlinx.coroutines.flow.Flow<0:0>(ai.grazie.code.agents.core.tools.Tool<0:0,0:1>;kotlin.Int){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> (kotlinx.coroutines.flow/Flow<#A1>).toParallelToolCalls(kotlin.reflect/KClass<out ai.grazie.code.agents.core.tools/Tool<#A1, #B1>>, kotlin/Int = ...): kotlinx.coroutines.flow/Flow<ai.grazie.code.agents.core.environment/SafeTool.Result<#B1>> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.toParallelToolCalls|toParallelToolCalls@kotlinx.coroutines.flow.Flow<0:0>(kotlin.reflect.KClass<out|ai.grazie.code.agents.core.tools.Tool<0:0,0:1>>;kotlin.Int){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> (kotlinx.coroutines.flow/Flow<#A1>).toParallelToolCallsRaw(ai.grazie.code.agents.core.environment/SafeTool<#A1, #B1>, kotlin/Int = ...): kotlinx.coroutines.flow/Flow<kotlin/String> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.toParallelToolCallsRaw|toParallelToolCallsRaw@kotlinx.coroutines.flow.Flow<0:0>(ai.grazie.code.agents.core.environment.SafeTool<0:0,0:1>;kotlin.Int){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> (kotlinx.coroutines.flow/Flow<#A1>).toParallelToolCallsRaw(kotlin.reflect/KClass<out ai.grazie.code.agents.core.tools/Tool<#A1, #B1>>, kotlin/Int = ...): kotlinx.coroutines.flow/Flow<kotlin/String> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.toParallelToolCallsRaw|toParallelToolCallsRaw@kotlinx.coroutines.flow.Flow<0:0>(kotlin.reflect.KClass<out|ai.grazie.code.agents.core.tools.Tool<0:0,0:1>>;kotlin.Int){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> findTool(kotlin.reflect/KClass<out ai.grazie.code.agents.core.tools/Tool<#A1, #B1>>): ai.grazie.code.agents.core.environment/SafeTool<#A1, #B1> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.findTool|findTool(kotlin.reflect.KClass<out|ai.grazie.code.agents.core.tools.Tool<0:0,0:1>>){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> findToolByNameAndArgs(kotlin/String): ai.grazie.code.agents.core.tools/Tool<#A1, #B1> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.findToolByNameAndArgs|findToolByNameAndArgs(kotlin.String){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args> findToolByName(kotlin/String): ai.grazie.code.agents.core.environment/SafeTool<#A1, *> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.findToolByName|findToolByName(kotlin.String){0§<ai.grazie.code.agents.core.tools.Tool.Args>}[0]
    final inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool<*, *>> findTool(): ai.grazie.code.agents.core.environment/SafeTool<*, *> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.findTool|findTool(){0§<ai.grazie.code.agents.core.tools.Tool<*,*>>}[0]
    final suspend fun <#A1: kotlin/Any?> requestLLMStructured(ai.grazie.code.prompt.structure/StructuredData<#A1>, kotlin/Int, ai.jetbrains.code.prompt.llm/LLModel): kotlin/Result<ai.grazie.code.prompt.structure/StructuredResponse<#A1>> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLMStructured|requestLLMStructured(ai.grazie.code.prompt.structure.StructuredData<0:0>;kotlin.Int;ai.jetbrains.code.prompt.llm.LLModel){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> requestLLMStructuredOneShot(ai.grazie.code.prompt.structure/StructuredData<#A1>): ai.grazie.code.prompt.structure/StructuredResponse<#A1> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLMStructuredOneShot|requestLLMStructuredOneShot(ai.grazie.code.prompt.structure.StructuredData<0:0>){0§<kotlin.Any?>}[0]
    final suspend fun requestLLM(): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLM|requestLLM(){}[0]
    final suspend fun requestLLMForceOneTool(ai.grazie.code.agents.core.tools/Tool<*, *>): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLMForceOneTool|requestLLMForceOneTool(ai.grazie.code.agents.core.tools.Tool<*,*>){}[0]
    final suspend fun requestLLMForceOneTool(ai.grazie.code.agents.core.tools/ToolDescriptor): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLMForceOneTool|requestLLMForceOneTool(ai.grazie.code.agents.core.tools.ToolDescriptor){}[0]
    final suspend fun requestLLMMultiple(): kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLMMultiple|requestLLMMultiple(){}[0]
    final suspend fun requestLLMOnlyCallingTools(): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLMOnlyCallingTools|requestLLMOnlyCallingTools(){}[0]
    final suspend fun requestLLMStreaming(ai.grazie.code.prompt.structure/StructuredDataDefinition? = ...): kotlinx.coroutines.flow/Flow<kotlin/String> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLMStreaming|requestLLMStreaming(ai.grazie.code.prompt.structure.StructuredDataDefinition?){}[0]
    final suspend fun requestLLMWithoutTools(): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.requestLLMWithoutTools|requestLLMWithoutTools(){}[0]
    final suspend inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> callTool(ai.grazie.code.agents.core.tools/Tool<#A1, #B1>, #A1): ai.grazie.code.agents.core.environment/SafeTool.Result<#B1> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.callTool|callTool(ai.grazie.code.agents.core.tools.Tool<0:0,0:1>;0:0){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final suspend inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args, #B1: reified ai.grazie.code.agents.core.tools/ToolResult> callTool(kotlin.reflect/KClass<out ai.grazie.code.agents.core.tools/Tool<#A1, #B1>>, #A1): ai.grazie.code.agents.core.environment/SafeTool.Result<#B1> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.callTool|callTool(kotlin.reflect.KClass<out|ai.grazie.code.agents.core.tools.Tool<0:0,0:1>>;0:0){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
    final suspend inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args> callTool(kotlin/String, #A1): ai.grazie.code.agents.core.environment/SafeTool.Result<out ai.grazie.code.agents.core.tools/ToolResult> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.callTool|callTool(kotlin.String;0:0){0§<ai.grazie.code.agents.core.tools.Tool.Args>}[0]
    final suspend inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool.Args> callToolRaw(kotlin/String, #A1): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.callToolRaw|callToolRaw(kotlin.String;0:0){0§<ai.grazie.code.agents.core.tools.Tool.Args>}[0]
    final suspend inline fun <#A1: reified ai.grazie.code.agents.core.tools/Tool<*, *>> callTool(ai.grazie.code.agents.core.tools/Tool.Args): ai.grazie.code.agents.core.environment/SafeTool.Result<out ai.grazie.code.agents.core.tools/ToolResult> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession.callTool|callTool(ai.grazie.code.agents.core.tools.Tool.Args){0§<ai.grazie.code.agents.core.tools.Tool<*,*>>}[0]
}

final class ai.grazie.code.agents.core.agent.entity/AIAgentStateManager // ai.grazie.code.agents.core.agent.entity/AIAgentStateManager|null[0]

final class ai.grazie.code.agents.core.agent.entity/AIAgentStorage { // ai.grazie.code.agents.core.agent.entity/AIAgentStorage|null[0]
    final suspend fun <#A1: kotlin/Any> get(ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<#A1>): #A1? // ai.grazie.code.agents.core.agent.entity/AIAgentStorage.get|get(ai.grazie.code.agents.core.agent.entity.AIAgentStorageKey<0:0>){0§<kotlin.Any>}[0]
    final suspend fun <#A1: kotlin/Any> remove(ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<#A1>): #A1? // ai.grazie.code.agents.core.agent.entity/AIAgentStorage.remove|remove(ai.grazie.code.agents.core.agent.entity.AIAgentStorageKey<0:0>){0§<kotlin.Any>}[0]
    final suspend fun <#A1: kotlin/Any> set(ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<#A1>, #A1) // ai.grazie.code.agents.core.agent.entity/AIAgentStorage.set|set(ai.grazie.code.agents.core.agent.entity.AIAgentStorageKey<0:0>;0:0){0§<kotlin.Any>}[0]
    final suspend fun clear() // ai.grazie.code.agents.core.agent.entity/AIAgentStorage.clear|clear(){}[0]
    final suspend fun putAll(kotlin.collections/Map<ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<*>, kotlin/Any>) // ai.grazie.code.agents.core.agent.entity/AIAgentStorage.putAll|putAll(kotlin.collections.Map<ai.grazie.code.agents.core.agent.entity.AIAgentStorageKey<*>,kotlin.Any>){}[0]
    final suspend fun toMap(): kotlin.collections/Map<ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<*>, kotlin/Any> // ai.grazie.code.agents.core.agent.entity/AIAgentStorage.toMap|toMap(){}[0]
}

final class ai.grazie.code.agents.core.agent.entity/AIAgentStrategy : ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph<kotlin/String, kotlin/String> { // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy|null[0]
    constructor <init>(kotlin/String, ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase<kotlin/String>, ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase<kotlin/String>, ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy) // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy.<init>|<init>(kotlin.String;ai.grazie.code.agents.core.agent.entity.StartAIAgentNodeBase<kotlin.String>;ai.grazie.code.agents.core.agent.entity.FinishAIAgentNodeBase<kotlin.String>;ai.grazie.code.agents.core.agent.entity.ToolSelectionStrategy){}[0]

    final val name // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy.name|{}name[0]
        final fun <get-name>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy.name.<get-name>|<get-name>(){}[0]
    final val nodeFinish // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy.nodeFinish|{}nodeFinish[0]
        final fun <get-nodeFinish>(): ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase<kotlin/String> // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy.nodeFinish.<get-nodeFinish>|<get-nodeFinish>(){}[0]
    final val nodeStart // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy.nodeStart|{}nodeStart[0]
        final fun <get-nodeStart>(): ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase<kotlin/String> // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy.nodeStart.<get-nodeStart>|<get-nodeStart>(){}[0]

    final suspend fun execute(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/String): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentStrategy.execute|execute(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;kotlin.String){}[0]
}

final class ai.grazie.code.agents.core.agent/AIAgentTool : ai.grazie.code.agents.core.tools/Tool<ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs, ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult> { // ai.grazie.code.agents.core.agent/AIAgentTool|null[0]
    constructor <init>(ai.grazie.code.agents.core.agent/AIAgentBase, kotlin/String, kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.agent/AIAgentTool.<init>|<init>(ai.grazie.code.agents.core.agent.AIAgentBase;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val argsSerializer // ai.grazie.code.agents.core.agent/AIAgentTool.argsSerializer|{}argsSerializer[0]
        final fun <get-argsSerializer>(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs> // ai.grazie.code.agents.core.agent/AIAgentTool.argsSerializer.<get-argsSerializer>|<get-argsSerializer>(){}[0]
    final val descriptor // ai.grazie.code.agents.core.agent/AIAgentTool.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): ai.grazie.code.agents.core.tools/ToolDescriptor // ai.grazie.code.agents.core.agent/AIAgentTool.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

    final class AgentToolArgs : ai.grazie.code.agents.core.tools/Tool.Args { // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs|null[0]
        constructor <init>(kotlin/String) // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.<init>|<init>(kotlin.String){}[0]

        final val request // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.request|{}request[0]
            final fun <get-request>(): kotlin/String // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.request.<get-request>|<get-request>(){}[0]

        final fun component1(): kotlin/String // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.toString|toString(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs> { // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.$serializer|null[0]
            final val descriptor // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs) // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.agent.AIAgentTool.AgentToolArgs){}[0]
        }

        final object Companion { // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs> // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs.Companion.serializer|serializer(){}[0]
        }
    }

    final class AgentToolResult : ai.grazie.code.agents.core.tools/ToolResult { // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult|null[0]
        constructor <init>(kotlin/Boolean, kotlin/String? = ..., kotlin/String? = ...) // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.<init>|<init>(kotlin.Boolean;kotlin.String?;kotlin.String?){}[0]

        final val errorMessage // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.errorMessage|{}errorMessage[0]
            final fun <get-errorMessage>(): kotlin/String? // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.errorMessage.<get-errorMessage>|<get-errorMessage>(){}[0]
        final val result // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.result|{}result[0]
            final fun <get-result>(): kotlin/String? // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.result.<get-result>|<get-result>(){}[0]
        final val successful // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.successful|{}successful[0]
            final fun <get-successful>(): kotlin/Boolean // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.successful.<get-successful>|<get-successful>(){}[0]

        final fun component1(): kotlin/Boolean // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.component1|component1(){}[0]
        final fun component2(): kotlin/String? // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.component2|component2(){}[0]
        final fun component3(): kotlin/String? // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.component3|component3(){}[0]
        final fun copy(kotlin/Boolean = ..., kotlin/String? = ..., kotlin/String? = ...): ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.copy|copy(kotlin.Boolean;kotlin.String?;kotlin.String?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.toString|toString(){}[0]
        final fun toStringDefault(): kotlin/String // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.toStringDefault|toStringDefault(){}[0]

        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult> { // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.$serializer|null[0]
            final val descriptor // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult) // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.agent.AIAgentTool.AgentToolResult){}[0]
        }

        final object Companion { // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult> // ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult.Companion.serializer|serializer(){}[0]
        }
    }
}

final class ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder : ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<kotlin/String, kotlin/String>, ai.grazie.code.agents.core.dsl.builder/BaseBuilder<ai.grazie.code.agents.core.agent.entity/AIAgentStrategy> { // ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder|null[0]
    constructor <init>(kotlin/String, ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy) // ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder.<init>|<init>(kotlin.String;ai.grazie.code.agents.core.agent.entity.ToolSelectionStrategy){}[0]

    final val nodeFinish // ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder.nodeFinish|{}nodeFinish[0]
        final fun <get-nodeFinish>(): ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase<kotlin/String> // ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder.nodeFinish.<get-nodeFinish>|<get-nodeFinish>(){}[0]
    final val nodeStart // ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder.nodeStart|{}nodeStart[0]
        final fun <get-nodeStart>(): ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase<kotlin/String> // ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder.nodeStart.<get-nodeStart>|<get-nodeStart>(){}[0]

    final fun build(): ai.grazie.code.agents.core.agent.entity/AIAgentStrategy // ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder.build|build(){}[0]
}

final class ai.grazie.code.agents.core.environment/ReceivedToolResult { // ai.grazie.code.agents.core.environment/ReceivedToolResult|null[0]
    constructor <init>(kotlin/String?, kotlin/String, kotlin/String, ai.grazie.code.agents.core.tools/ToolResult?) // ai.grazie.code.agents.core.environment/ReceivedToolResult.<init>|<init>(kotlin.String?;kotlin.String;kotlin.String;ai.grazie.code.agents.core.tools.ToolResult?){}[0]

    final val content // ai.grazie.code.agents.core.environment/ReceivedToolResult.content|{}content[0]
        final fun <get-content>(): kotlin/String // ai.grazie.code.agents.core.environment/ReceivedToolResult.content.<get-content>|<get-content>(){}[0]
    final val id // ai.grazie.code.agents.core.environment/ReceivedToolResult.id|{}id[0]
        final fun <get-id>(): kotlin/String? // ai.grazie.code.agents.core.environment/ReceivedToolResult.id.<get-id>|<get-id>(){}[0]
    final val result // ai.grazie.code.agents.core.environment/ReceivedToolResult.result|{}result[0]
        final fun <get-result>(): ai.grazie.code.agents.core.tools/ToolResult? // ai.grazie.code.agents.core.environment/ReceivedToolResult.result.<get-result>|<get-result>(){}[0]
    final val tool // ai.grazie.code.agents.core.environment/ReceivedToolResult.tool|{}tool[0]
        final fun <get-tool>(): kotlin/String // ai.grazie.code.agents.core.environment/ReceivedToolResult.tool.<get-tool>|<get-tool>(){}[0]

    final fun component1(): kotlin/String? // ai.grazie.code.agents.core.environment/ReceivedToolResult.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.environment/ReceivedToolResult.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.environment/ReceivedToolResult.component3|component3(){}[0]
    final fun component4(): ai.grazie.code.agents.core.tools/ToolResult? // ai.grazie.code.agents.core.environment/ReceivedToolResult.component4|component4(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/String = ..., kotlin/String = ..., ai.grazie.code.agents.core.tools/ToolResult? = ...): ai.grazie.code.agents.core.environment/ReceivedToolResult // ai.grazie.code.agents.core.environment/ReceivedToolResult.copy|copy(kotlin.String?;kotlin.String;kotlin.String;ai.grazie.code.agents.core.tools.ToolResult?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.environment/ReceivedToolResult.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.environment/ReceivedToolResult.hashCode|hashCode(){}[0]
    final fun toMessage(): ai.jetbrains.code.prompt.message/Message.Tool.Result // ai.grazie.code.agents.core.environment/ReceivedToolResult.toMessage|toMessage(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.environment/ReceivedToolResult.toString|toString(){}[0]
}

final class ai.grazie.code.agents.core.exception/AgentNotFoundException : ai.grazie.code.agents.core.exception/AgentEngineException { // ai.grazie.code.agents.core.exception/AgentNotFoundException|null[0]
    constructor <init>(kotlin/String) // ai.grazie.code.agents.core.exception/AgentNotFoundException.<init>|<init>(kotlin.String){}[0]
}

final class ai.grazie.code.agents.core.exception/MalformedMessageException : ai.grazie.code.agents.core.exception/AgentEngineException { // ai.grazie.code.agents.core.exception/MalformedMessageException|null[0]
    constructor <init>(kotlin/String) // ai.grazie.code.agents.core.exception/MalformedMessageException.<init>|<init>(kotlin.String){}[0]
}

final class ai.grazie.code.agents.core.exception/ToolNotRegisteredException : ai.grazie.code.agents.core.exception/AgentRuntimeException { // ai.grazie.code.agents.core.exception/ToolNotRegisteredException|null[0]
    constructor <init>(kotlin/String) // ai.grazie.code.agents.core.exception/ToolNotRegisteredException.<init>|<init>(kotlin.String){}[0]
}

final class ai.grazie.code.agents.core.exception/UnexpectedMessageTypeException : ai.grazie.code.agents.core.exception/AgentEngineException { // ai.grazie.code.agents.core.exception/UnexpectedMessageTypeException|null[0]
    constructor <init>(kotlin/String) // ai.grazie.code.agents.core.exception/UnexpectedMessageTypeException.<init>|<init>(kotlin.String){}[0]
}

final class ai.grazie.code.agents.core.exception/UnexpectedServerException : ai.grazie.code.agents.core.exception/AgentEngineException { // ai.grazie.code.agents.core.exception/UnexpectedServerException|null[0]
    constructor <init>(kotlin/String) // ai.grazie.code.agents.core.exception/UnexpectedServerException.<init>|<init>(kotlin.String){}[0]
}

final class ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler { // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler|null[0]
    constructor <init>() // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.<init>|<init>(){}[0]

    final var afterLLMCallHandler // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.afterLLMCallHandler|{}afterLLMCallHandler[0]
        final fun <get-afterLLMCallHandler>(): ai.grazie.code.agents.core.feature.handler/AfterLLMCallHandler // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.afterLLMCallHandler.<get-afterLLMCallHandler>|<get-afterLLMCallHandler>(){}[0]
        final fun <set-afterLLMCallHandler>(ai.grazie.code.agents.core.feature.handler/AfterLLMCallHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.afterLLMCallHandler.<set-afterLLMCallHandler>|<set-afterLLMCallHandler>(ai.grazie.code.agents.core.feature.handler.AfterLLMCallHandler){}[0]
    final var afterLLMCallWithToolsHandler // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.afterLLMCallWithToolsHandler|{}afterLLMCallWithToolsHandler[0]
        final fun <get-afterLLMCallWithToolsHandler>(): ai.grazie.code.agents.core.feature.handler/AfterLLMCallWithToolsHandler // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.afterLLMCallWithToolsHandler.<get-afterLLMCallWithToolsHandler>|<get-afterLLMCallWithToolsHandler>(){}[0]
        final fun <set-afterLLMCallWithToolsHandler>(ai.grazie.code.agents.core.feature.handler/AfterLLMCallWithToolsHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.afterLLMCallWithToolsHandler.<set-afterLLMCallWithToolsHandler>|<set-afterLLMCallWithToolsHandler>(ai.grazie.code.agents.core.feature.handler.AfterLLMCallWithToolsHandler){}[0]
    final var beforeLLMCallHandler // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.beforeLLMCallHandler|{}beforeLLMCallHandler[0]
        final fun <get-beforeLLMCallHandler>(): ai.grazie.code.agents.core.feature.handler/BeforeLLMCallHandler // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.beforeLLMCallHandler.<get-beforeLLMCallHandler>|<get-beforeLLMCallHandler>(){}[0]
        final fun <set-beforeLLMCallHandler>(ai.grazie.code.agents.core.feature.handler/BeforeLLMCallHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.beforeLLMCallHandler.<set-beforeLLMCallHandler>|<set-beforeLLMCallHandler>(ai.grazie.code.agents.core.feature.handler.BeforeLLMCallHandler){}[0]
    final var beforeLLMCallWithToolsHandler // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.beforeLLMCallWithToolsHandler|{}beforeLLMCallWithToolsHandler[0]
        final fun <get-beforeLLMCallWithToolsHandler>(): ai.grazie.code.agents.core.feature.handler/BeforeLLMCallWithToolsHandler // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.beforeLLMCallWithToolsHandler.<get-beforeLLMCallWithToolsHandler>|<get-beforeLLMCallWithToolsHandler>(){}[0]
        final fun <set-beforeLLMCallWithToolsHandler>(ai.grazie.code.agents.core.feature.handler/BeforeLLMCallWithToolsHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteLLMHandler.beforeLLMCallWithToolsHandler.<set-beforeLLMCallWithToolsHandler>|<set-beforeLLMCallWithToolsHandler>(ai.grazie.code.agents.core.feature.handler.BeforeLLMCallWithToolsHandler){}[0]
}

final class ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler { // ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler|null[0]
    constructor <init>() // ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler.<init>|<init>(){}[0]

    final var afterNodeHandler // ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler.afterNodeHandler|{}afterNodeHandler[0]
        final fun <get-afterNodeHandler>(): ai.grazie.code.agents.core.feature.handler/AfterNodeHandler // ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler.afterNodeHandler.<get-afterNodeHandler>|<get-afterNodeHandler>(){}[0]
        final fun <set-afterNodeHandler>(ai.grazie.code.agents.core.feature.handler/AfterNodeHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler.afterNodeHandler.<set-afterNodeHandler>|<set-afterNodeHandler>(ai.grazie.code.agents.core.feature.handler.AfterNodeHandler){}[0]
    final var beforeNodeHandler // ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler.beforeNodeHandler|{}beforeNodeHandler[0]
        final fun <get-beforeNodeHandler>(): ai.grazie.code.agents.core.feature.handler/BeforeNodeHandler // ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler.beforeNodeHandler.<get-beforeNodeHandler>|<get-beforeNodeHandler>(){}[0]
        final fun <set-beforeNodeHandler>(ai.grazie.code.agents.core.feature.handler/BeforeNodeHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteNodeHandler.beforeNodeHandler.<set-beforeNodeHandler>|<set-beforeNodeHandler>(ai.grazie.code.agents.core.feature.handler.BeforeNodeHandler){}[0]
}

final class ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler { // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler|null[0]
    constructor <init>() // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.<init>|<init>(){}[0]

    final var toolCallFailureHandler // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallFailureHandler|{}toolCallFailureHandler[0]
        final fun <get-toolCallFailureHandler>(): ai.grazie.code.agents.core.feature.handler/ToolCallFailureHandler // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallFailureHandler.<get-toolCallFailureHandler>|<get-toolCallFailureHandler>(){}[0]
        final fun <set-toolCallFailureHandler>(ai.grazie.code.agents.core.feature.handler/ToolCallFailureHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallFailureHandler.<set-toolCallFailureHandler>|<set-toolCallFailureHandler>(ai.grazie.code.agents.core.feature.handler.ToolCallFailureHandler){}[0]
    final var toolCallHandler // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallHandler|{}toolCallHandler[0]
        final fun <get-toolCallHandler>(): ai.grazie.code.agents.core.feature.handler/ToolCallHandler // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallHandler.<get-toolCallHandler>|<get-toolCallHandler>(){}[0]
        final fun <set-toolCallHandler>(ai.grazie.code.agents.core.feature.handler/ToolCallHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallHandler.<set-toolCallHandler>|<set-toolCallHandler>(ai.grazie.code.agents.core.feature.handler.ToolCallHandler){}[0]
    final var toolCallResultHandler // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallResultHandler|{}toolCallResultHandler[0]
        final fun <get-toolCallResultHandler>(): ai.grazie.code.agents.core.feature.handler/ToolCallResultHandler // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallResultHandler.<get-toolCallResultHandler>|<get-toolCallResultHandler>(){}[0]
        final fun <set-toolCallResultHandler>(ai.grazie.code.agents.core.feature.handler/ToolCallResultHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolCallResultHandler.<set-toolCallResultHandler>|<set-toolCallResultHandler>(ai.grazie.code.agents.core.feature.handler.ToolCallResultHandler){}[0]
    final var toolValidationErrorHandler // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolValidationErrorHandler|{}toolValidationErrorHandler[0]
        final fun <get-toolValidationErrorHandler>(): ai.grazie.code.agents.core.feature.handler/ToolValidationErrorHandler // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolValidationErrorHandler.<get-toolValidationErrorHandler>|<get-toolValidationErrorHandler>(){}[0]
        final fun <set-toolValidationErrorHandler>(ai.grazie.code.agents.core.feature.handler/ToolValidationErrorHandler) // ai.grazie.code.agents.core.feature.handler/ExecuteToolHandler.toolValidationErrorHandler.<set-toolValidationErrorHandler>|<set-toolValidationErrorHandler>(ai.grazie.code.agents.core.feature.handler.ToolValidationErrorHandler){}[0]
}

final class ai.grazie.code.agents.core.feature.model/AIAgentError { // ai.grazie.code.agents.core.feature.model/AIAgentError|null[0]
    constructor <init>(kotlin/Throwable) // ai.grazie.code.agents.core.feature.model/AIAgentError.<init>|<init>(kotlin.Throwable){}[0]

    final val cause // ai.grazie.code.agents.core.feature.model/AIAgentError.cause|{}cause[0]
        final fun <get-cause>(): kotlin/String? // ai.grazie.code.agents.core.feature.model/AIAgentError.cause.<get-cause>|<get-cause>(){}[0]
    final val message // ai.grazie.code.agents.core.feature.model/AIAgentError.message|{}message[0]
        final fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentError.message.<get-message>|<get-message>(){}[0]
    final val stackTrace // ai.grazie.code.agents.core.feature.model/AIAgentError.stackTrace|{}stackTrace[0]
        final fun <get-stackTrace>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentError.stackTrace.<get-stackTrace>|<get-stackTrace>(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/AIAgentError> { // ai.grazie.code.agents.core.feature.model/AIAgentError.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/AIAgentError.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/AIAgentError.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/AIAgentError.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/AIAgentError // ai.grazie.code.agents.core.feature.model/AIAgentError.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/AIAgentError) // ai.grazie.code.agents.core.feature.model/AIAgentError.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.AIAgentError){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/AIAgentError.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/AIAgentError> // ai.grazie.code.agents.core.feature.model/AIAgentError.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String?, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.<init>|<init>(kotlin.String;kotlin.String?;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val result // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.result|{}result[0]
        final fun <get-result>(): kotlin/String? // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.result.<get-result>|<get-result>(){}[0]
    final val strategyName // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.strategyName|{}strategyName[0]
        final fun <get-strategyName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.strategyName.<get-strategyName>|<get-strategyName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String? // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.copy|copy(kotlin.String;kotlin.String?;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent> { // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent) // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.AIAgentFinishedEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent> // ai.grazie.code.agents.core.feature.model/AIAgentFinishedEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val input // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.input|{}input[0]
        final fun <get-input>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.input.<get-input>|<get-input>(){}[0]
    final val nodeName // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.nodeName|{}nodeName[0]
        final fun <get-nodeName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.nodeName.<get-nodeName>|<get-nodeName>(){}[0]
    final val output // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.output|{}output[0]
        final fun <get-output>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.output.<get-output>|<get-output>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.component3|component3(){}[0]
    final fun component4(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.copy|copy(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent> { // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent) // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.AIAgentNodeExecutionEndEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent> // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionEndEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val input // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.input|{}input[0]
        final fun <get-input>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.input.<get-input>|<get-input>(){}[0]
    final val nodeName // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.nodeName|{}nodeName[0]
        final fun <get-nodeName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.nodeName.<get-nodeName>|<get-nodeName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.copy|copy(kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent> { // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent) // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.AIAgentNodeExecutionStartEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent> // ai.grazie.code.agents.core.feature.model/AIAgentNodeExecutionStartEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent|null[0]
    constructor <init>(kotlin/String, ai.grazie.code.agents.core.feature.model/AIAgentError, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.<init>|<init>(kotlin.String;ai.grazie.code.agents.core.feature.model.AIAgentError;kotlin.String){}[0]

    final val error // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.error|{}error[0]
        final fun <get-error>(): ai.grazie.code.agents.core.feature.model/AIAgentError // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.error.<get-error>|<get-error>(){}[0]
    final val eventId // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val strategyName // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.strategyName|{}strategyName[0]
        final fun <get-strategyName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.strategyName.<get-strategyName>|<get-strategyName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.feature.model/AIAgentError // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., ai.grazie.code.agents.core.feature.model/AIAgentError = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.copy|copy(kotlin.String;ai.grazie.code.agents.core.feature.model.AIAgentError;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent> { // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent) // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.AIAgentRunErrorEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent> // ai.grazie.code.agents.core.feature.model/AIAgentRunErrorEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val strategyName // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.strategyName|{}strategyName[0]
        final fun <get-strategyName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.strategyName.<get-strategyName>|<get-strategyName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent> { // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent) // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.AIAgentStartedEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent> // ai.grazie.code.agents.core.feature.model/AIAgentStartedEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val result // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.result|{}result[0]
        final fun <get-result>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.result.<get-result>|<get-result>(){}[0]
    final val strategyName // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.strategyName|{}strategyName[0]
        final fun <get-strategyName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.strategyName.<get-strategyName>|<get-strategyName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.copy|copy(kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent> { // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent) // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.AIAgentStrategyFinishedEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent> // ai.grazie.code.agents.core.feature.model/AIAgentStrategyFinishedEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val strategyName // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.strategyName|{}strategyName[0]
        final fun <get-strategyName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.strategyName.<get-strategyName>|<get-strategyName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent> { // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent) // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.AIAgentStrategyStartEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent> // ai.grazie.code.agents.core.feature.model/AIAgentStrategyStartEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/LLMCallEndEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val response // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.response|{}response[0]
        final fun <get-response>(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.response.<get-response>|<get-response>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/LLMCallEndEvent // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/LLMCallEndEvent> { // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/LLMCallEndEvent // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/LLMCallEndEvent) // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.LLMCallEndEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/LLMCallEndEvent> // ai.grazie.code.agents.core.feature.model/LLMCallEndEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/LLMCallStartEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent|null[0]
    constructor <init>(kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val prompt // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.prompt|{}prompt[0]
        final fun <get-prompt>(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.prompt.<get-prompt>|<get-prompt>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/LLMCallStartEvent // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/LLMCallStartEvent> { // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/LLMCallStartEvent // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/LLMCallStartEvent) // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.LLMCallStartEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/LLMCallStartEvent> // ai.grazie.code.agents.core.feature.model/LLMCallStartEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>, kotlin.collections/List<kotlin/String>, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val responses // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.responses|{}responses[0]
        final fun <get-responses>(): kotlin.collections/List<kotlin/String> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.responses.<get-responses>|<get-responses>(){}[0]
    final val tools // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.tools|{}tools[0]
        final fun <get-tools>(): kotlin.collections/List<kotlin/String> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.tools.<get-tools>|<get-tools>(){}[0]

    final fun component1(): kotlin.collections/List<kotlin/String> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<kotlin/String> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.component3|component3(){}[0]
    final fun copy(kotlin.collections/List<kotlin/String> = ..., kotlin.collections/List<kotlin/String> = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.collections.List<kotlin.String>;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent> { // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent) // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.LLMCallWithToolsEndEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsEndEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val prompt // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.prompt|{}prompt[0]
        final fun <get-prompt>(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.prompt.<get-prompt>|<get-prompt>(){}[0]
    final val tools // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.tools|{}tools[0]
        final fun <get-tools>(): kotlin.collections/List<kotlin/String> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.tools.<get-tools>|<get-tools>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<kotlin/String> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin.collections/List<kotlin/String> = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.copy|copy(kotlin.String;kotlin.collections.List<kotlin.String>;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent> { // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent) // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.LLMCallWithToolsStartEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent> // ai.grazie.code.agents.core.feature.model/LLMCallWithToolsStartEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/ToolCallEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/ToolCallEvent|null[0]
    constructor <init>(kotlin/String, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/ToolCallEvent.<init>|<init>(kotlin.String;ai.grazie.code.agents.core.tools.Tool.Args;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/ToolCallEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val toolArgs // ai.grazie.code.agents.core.feature.model/ToolCallEvent.toolArgs|{}toolArgs[0]
        final fun <get-toolArgs>(): ai.grazie.code.agents.core.tools/Tool.Args // ai.grazie.code.agents.core.feature.model/ToolCallEvent.toolArgs.<get-toolArgs>|<get-toolArgs>(){}[0]
    final val toolName // ai.grazie.code.agents.core.feature.model/ToolCallEvent.toolName|{}toolName[0]
        final fun <get-toolName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallEvent.toolName.<get-toolName>|<get-toolName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallEvent.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.tools/Tool.Args // ai.grazie.code.agents.core.feature.model/ToolCallEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallEvent.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., ai.grazie.code.agents.core.tools/Tool.Args = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/ToolCallEvent // ai.grazie.code.agents.core.feature.model/ToolCallEvent.copy|copy(kotlin.String;ai.grazie.code.agents.core.tools.Tool.Args;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/ToolCallEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/ToolCallEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/ToolCallEvent> { // ai.grazie.code.agents.core.feature.model/ToolCallEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/ToolCallEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/ToolCallEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/ToolCallEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/ToolCallEvent // ai.grazie.code.agents.core.feature.model/ToolCallEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/ToolCallEvent) // ai.grazie.code.agents.core.feature.model/ToolCallEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.ToolCallEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/ToolCallEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/ToolCallEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/ToolCallEvent> // ai.grazie.code.agents.core.feature.model/ToolCallEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent|null[0]
    constructor <init>(kotlin/String, ai.grazie.code.agents.core.tools/Tool.Args, ai.grazie.code.agents.core.feature.model/AIAgentError, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.<init>|<init>(kotlin.String;ai.grazie.code.agents.core.tools.Tool.Args;ai.grazie.code.agents.core.feature.model.AIAgentError;kotlin.String){}[0]

    final val error // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.error|{}error[0]
        final fun <get-error>(): ai.grazie.code.agents.core.feature.model/AIAgentError // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.error.<get-error>|<get-error>(){}[0]
    final val eventId // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val toolArgs // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.toolArgs|{}toolArgs[0]
        final fun <get-toolArgs>(): ai.grazie.code.agents.core.tools/Tool.Args // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.toolArgs.<get-toolArgs>|<get-toolArgs>(){}[0]
    final val toolName // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.toolName|{}toolName[0]
        final fun <get-toolName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.toolName.<get-toolName>|<get-toolName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.tools/Tool.Args // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.component2|component2(){}[0]
    final fun component3(): ai.grazie.code.agents.core.feature.model/AIAgentError // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.component3|component3(){}[0]
    final fun component4(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., ai.grazie.code.agents.core.tools/Tool.Args = ..., ai.grazie.code.agents.core.feature.model/AIAgentError = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.copy|copy(kotlin.String;ai.grazie.code.agents.core.tools.Tool.Args;ai.grazie.code.agents.core.feature.model.AIAgentError;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent> { // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent) // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.ToolCallFailureEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent> // ai.grazie.code.agents.core.feature.model/ToolCallFailureEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/ToolCallResultEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent|null[0]
    constructor <init>(kotlin/String, ai.grazie.code.agents.core.tools/Tool.Args, ai.grazie.code.agents.core.tools/ToolResult?, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.<init>|<init>(kotlin.String;ai.grazie.code.agents.core.tools.Tool.Args;ai.grazie.code.agents.core.tools.ToolResult?;kotlin.String){}[0]

    final val eventId // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val result // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.result|{}result[0]
        final fun <get-result>(): ai.grazie.code.agents.core.tools/ToolResult? // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.result.<get-result>|<get-result>(){}[0]
    final val toolArgs // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.toolArgs|{}toolArgs[0]
        final fun <get-toolArgs>(): ai.grazie.code.agents.core.tools/Tool.Args // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.toolArgs.<get-toolArgs>|<get-toolArgs>(){}[0]
    final val toolName // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.toolName|{}toolName[0]
        final fun <get-toolName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.toolName.<get-toolName>|<get-toolName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.tools/Tool.Args // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.component2|component2(){}[0]
    final fun component3(): ai.grazie.code.agents.core.tools/ToolResult? // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.component3|component3(){}[0]
    final fun component4(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., ai.grazie.code.agents.core.tools/Tool.Args = ..., ai.grazie.code.agents.core.tools/ToolResult? = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/ToolCallResultEvent // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.copy|copy(kotlin.String;ai.grazie.code.agents.core.tools.Tool.Args;ai.grazie.code.agents.core.tools.ToolResult?;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/ToolCallResultEvent> { // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/ToolCallResultEvent // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/ToolCallResultEvent) // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.ToolCallResultEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/ToolCallResultEvent> // ai.grazie.code.agents.core.feature.model/ToolCallResultEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent : ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent { // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent|null[0]
    constructor <init>(kotlin/String, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.<init>|<init>(kotlin.String;ai.grazie.code.agents.core.tools.Tool.Args;kotlin.String;kotlin.String){}[0]

    final val errorMessage // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.errorMessage|{}errorMessage[0]
        final fun <get-errorMessage>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.errorMessage.<get-errorMessage>|<get-errorMessage>(){}[0]
    final val eventId // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.eventId|{}eventId[0]
        final fun <get-eventId>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.eventId.<get-eventId>|<get-eventId>(){}[0]
    final val toolArgs // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.toolArgs|{}toolArgs[0]
        final fun <get-toolArgs>(): ai.grazie.code.agents.core.tools/Tool.Args // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.toolArgs.<get-toolArgs>|<get-toolArgs>(){}[0]
    final val toolName // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.toolName|{}toolName[0]
        final fun <get-toolName>(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.toolName.<get-toolName>|<get-toolName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.tools/Tool.Args // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.component3|component3(){}[0]
    final fun component4(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., ai.grazie.code.agents.core.tools/Tool.Args = ..., kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.copy|copy(kotlin.String;ai.grazie.code.agents.core.tools.Tool.Args;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent> { // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent) // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.feature.model.ToolValidationErrorEvent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent> // ai.grazie.code.agents.core.feature.model/ToolValidationErrorEvent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.feature.remote.client.config/AIAgentFeatureClientConnectionConfig : ai.grazie.code.agents.local.features.common.remote.client.config/ClientConnectionConfig { // ai.grazie.code.agents.core.feature.remote.client.config/AIAgentFeatureClientConnectionConfig|null[0]
    constructor <init>(kotlin/String, kotlin/Int? = ..., io.ktor.http/URLProtocol = ...) // ai.grazie.code.agents.core.feature.remote.client.config/AIAgentFeatureClientConnectionConfig.<init>|<init>(kotlin.String;kotlin.Int?;io.ktor.http.URLProtocol){}[0]
}

final class ai.grazie.code.agents.core.feature.remote.server.config/AIAgentFeatureServerConnectionConfig : ai.grazie.code.agents.local.features.common.remote.server.config/ServerConnectionConfig { // ai.grazie.code.agents.core.feature.remote.server.config/AIAgentFeatureServerConnectionConfig|null[0]
    constructor <init>(kotlin/Int) // ai.grazie.code.agents.core.feature.remote.server.config/AIAgentFeatureServerConnectionConfig.<init>|<init>(kotlin.Int){}[0]
}

final class ai.grazie.code.agents.core.feature/AIAgentPipeline { // ai.grazie.code.agents.core.feature/AIAgentPipeline|null[0]
    constructor <init>() // ai.grazie.code.agents.core.feature/AIAgentPipeline.<init>|<init>(){}[0]

    final fun <#A1: ai.grazie.code.agents.local.features.common.config/FeatureConfig, #B1: kotlin/Any> install(ai.grazie.code.agents.core.feature/AIAgentFeature<#A1, #B1>, kotlin/Function1<#A1, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.install|install(ai.grazie.code.agents.core.feature.AIAgentFeature<0:0,0:1>;kotlin.Function1<0:0,kotlin.Unit>){0§<ai.grazie.code.agents.local.features.common.config.FeatureConfig>;1§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptAfterLLMCall(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction2<#A1, kotlin/String, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptAfterLLMCall|interceptAfterLLMCall(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction2<0:0,kotlin.String,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptAfterLLMCallWithTools(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction3<#A1, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response>, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptAfterLLMCallWithTools|interceptAfterLLMCallWithTools(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction3<0:0,kotlin.collections.List<ai.jetbrains.code.prompt.message.Message.Response>,kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptAfterNode(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction5<#A1, ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<*, *>, ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/Any?, kotlin/Any?, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptAfterNode|interceptAfterNode(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction5<0:0,ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<*,*>,ai.grazie.code.agents.core.agent.entity.AIAgentContextBase,kotlin.Any?,kotlin.Any?,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptAgentFinished(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction3<#A1, kotlin/String, kotlin/String?, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptAgentFinished|interceptAgentFinished(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction3<0:0,kotlin.String,kotlin.String?,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptAgentRunError(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction3<#A1, kotlin/String, kotlin/Throwable, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptAgentRunError|interceptAgentRunError(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction3<0:0,kotlin.String,kotlin.Throwable,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptBeforeAgentStarted(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction1<ai.grazie.code.agents.core.feature.handler/AgentStartContext<#A1>, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptBeforeAgentStarted|interceptBeforeAgentStarted(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction1<ai.grazie.code.agents.core.feature.handler.AgentStartContext<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptBeforeLLMCall(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction2<#A1, ai.jetbrains.code.prompt.dsl/Prompt, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptBeforeLLMCall|interceptBeforeLLMCall(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction2<0:0,ai.jetbrains.code.prompt.dsl.Prompt,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptBeforeLLMCallWithTools(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction3<#A1, ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptBeforeLLMCallWithTools|interceptBeforeLLMCallWithTools(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction3<0:0,ai.jetbrains.code.prompt.dsl.Prompt,kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptBeforeNode(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction4<#A1, ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<*, *>, ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/Any?, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptBeforeNode|interceptBeforeNode(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction4<0:0,ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<*,*>,ai.grazie.code.agents.core.agent.entity.AIAgentContextBase,kotlin.Any?,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptContextAgentFeature(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, ai.grazie.code.agents.core.feature.handler/AgentContextHandler<#A1>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptContextAgentFeature|interceptContextAgentFeature(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;ai.grazie.code.agents.core.feature.handler.AgentContextHandler<0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptEnvironmentCreated(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin/Function2<ai.grazie.code.agents.core.feature.handler/AgentCreateContext<#A1>, ai.grazie.code.agents.core.environment/AIAgentEnvironment, ai.grazie.code.agents.core.environment/AIAgentEnvironment>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptEnvironmentCreated|interceptEnvironmentCreated(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.Function2<ai.grazie.code.agents.core.feature.handler.AgentCreateContext<0:0>,ai.grazie.code.agents.core.environment.AIAgentEnvironment,ai.grazie.code.agents.core.environment.AIAgentEnvironment>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptStrategyFinished(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction3<#A1, kotlin/String, kotlin/String, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptStrategyFinished|interceptStrategyFinished(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction3<0:0,kotlin.String,kotlin.String,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptStrategyStarted(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction1<ai.grazie.code.agents.core.feature.handler/StrategyUpdateContext<#A1>, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptStrategyStarted|interceptStrategyStarted(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction1<ai.grazie.code.agents.core.feature.handler.StrategyUpdateContext<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptToolCall(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction3<#A1, ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptToolCall|interceptToolCall(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction3<0:0,ai.grazie.code.agents.core.tools.Tool<*,*>,ai.grazie.code.agents.core.tools.Tool.Args,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptToolCallFailure(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction4<#A1, ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/Throwable, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptToolCallFailure|interceptToolCallFailure(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction4<0:0,ai.grazie.code.agents.core.tools.Tool<*,*>,ai.grazie.code.agents.core.tools.Tool.Args,kotlin.Throwable,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptToolCallResult(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction4<#A1, ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, ai.grazie.code.agents.core.tools/ToolResult?, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptToolCallResult|interceptToolCallResult(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction4<0:0,ai.grazie.code.agents.core.tools.Tool<*,*>,ai.grazie.code.agents.core.tools.Tool.Args,ai.grazie.code.agents.core.tools.ToolResult?,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> interceptToolValidationError(ai.grazie.code.agents.core.feature/AIAgentFeature<*, #A1>, #A1, kotlin.coroutines/SuspendFunction4<#A1, ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/String, kotlin/Unit>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.interceptToolValidationError|interceptToolValidationError(ai.grazie.code.agents.core.feature.AIAgentFeature<*,0:0>;0:0;kotlin.coroutines.SuspendFunction4<0:0,ai.grazie.code.agents.core.tools.Tool<*,*>,ai.grazie.code.agents.core.tools.Tool.Args,kotlin.String,kotlin.Unit>){0§<kotlin.Any>}[0]
    final fun getAgentFeatures(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase): kotlin.collections/Map<ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<*>, kotlin/Any> // ai.grazie.code.agents.core.feature/AIAgentPipeline.getAgentFeatures|getAgentFeatures(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase){}[0]
    final fun transformEnvironment(ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, ai.grazie.code.agents.core.agent/AIAgent, ai.grazie.code.agents.core.environment/AIAgentEnvironment): ai.grazie.code.agents.core.environment/AIAgentEnvironment // ai.grazie.code.agents.core.feature/AIAgentPipeline.transformEnvironment|transformEnvironment(ai.grazie.code.agents.core.agent.entity.AIAgentStrategy;ai.grazie.code.agents.core.agent.AIAgent;ai.grazie.code.agents.core.environment.AIAgentEnvironment){}[0]
    final suspend fun onAfterLLMCall(kotlin/String) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onAfterLLMCall|onAfterLLMCall(kotlin.String){}[0]
    final suspend fun onAfterLLMWithToolsCall(kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response>, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onAfterLLMWithToolsCall|onAfterLLMWithToolsCall(kotlin.collections.List<ai.jetbrains.code.prompt.message.Message.Response>;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    final suspend fun onAfterNode(ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<*, *>, ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/Any?, kotlin/Any?) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onAfterNode|onAfterNode(ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<*,*>;ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;kotlin.Any?;kotlin.Any?){}[0]
    final suspend fun onAgentFinished(kotlin/String, kotlin/String?) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onAgentFinished|onAgentFinished(kotlin.String;kotlin.String?){}[0]
    final suspend fun onAgentRunError(kotlin/String, kotlin/Throwable) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onAgentRunError|onAgentRunError(kotlin.String;kotlin.Throwable){}[0]
    final suspend fun onBeforeAgentStarted(ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, ai.grazie.code.agents.core.agent/AIAgent) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onBeforeAgentStarted|onBeforeAgentStarted(ai.grazie.code.agents.core.agent.entity.AIAgentStrategy;ai.grazie.code.agents.core.agent.AIAgent){}[0]
    final suspend fun onBeforeLLMCall(ai.jetbrains.code.prompt.dsl/Prompt) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onBeforeLLMCall|onBeforeLLMCall(ai.jetbrains.code.prompt.dsl.Prompt){}[0]
    final suspend fun onBeforeLLMWithToolsCall(ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onBeforeLLMWithToolsCall|onBeforeLLMWithToolsCall(ai.jetbrains.code.prompt.dsl.Prompt;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    final suspend fun onBeforeNode(ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<*, *>, ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, kotlin/Any?) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onBeforeNode|onBeforeNode(ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<*,*>;ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;kotlin.Any?){}[0]
    final suspend fun onStrategyFinished(kotlin/String, kotlin/String) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onStrategyFinished|onStrategyFinished(kotlin.String;kotlin.String){}[0]
    final suspend fun onStrategyStarted(ai.grazie.code.agents.core.agent.entity/AIAgentStrategy) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onStrategyStarted|onStrategyStarted(ai.grazie.code.agents.core.agent.entity.AIAgentStrategy){}[0]
    final suspend fun onToolCall(ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onToolCall|onToolCall(ai.grazie.code.agents.core.tools.Tool<*,*>;ai.grazie.code.agents.core.tools.Tool.Args){}[0]
    final suspend fun onToolCallFailure(ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/Throwable) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onToolCallFailure|onToolCallFailure(ai.grazie.code.agents.core.tools.Tool<*,*>;ai.grazie.code.agents.core.tools.Tool.Args;kotlin.Throwable){}[0]
    final suspend fun onToolCallResult(ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, ai.grazie.code.agents.core.tools/ToolResult?) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onToolCallResult|onToolCallResult(ai.grazie.code.agents.core.tools.Tool<*,*>;ai.grazie.code.agents.core.tools.Tool.Args;ai.grazie.code.agents.core.tools.ToolResult?){}[0]
    final suspend fun onToolValidationError(ai.grazie.code.agents.core.tools/Tool<*, *>, ai.grazie.code.agents.core.tools/Tool.Args, kotlin/String) // ai.grazie.code.agents.core.feature/AIAgentPipeline.onToolValidationError|onToolValidationError(ai.grazie.code.agents.core.tools.Tool<*,*>;ai.grazie.code.agents.core.tools.Tool.Args;kotlin.String){}[0]
}

final class ai.grazie.code.agents.core.feature/PromptExecutorProxy : ai.jetbrains.code.prompt.executor.model/PromptExecutor { // ai.grazie.code.agents.core.feature/PromptExecutorProxy|null[0]
    constructor <init>(ai.jetbrains.code.prompt.executor.model/PromptExecutor, ai.grazie.code.agents.core.feature/AIAgentPipeline) // ai.grazie.code.agents.core.feature/PromptExecutorProxy.<init>|<init>(ai.jetbrains.code.prompt.executor.model.PromptExecutor;ai.grazie.code.agents.core.feature.AIAgentPipeline){}[0]

    final suspend fun execute(ai.jetbrains.code.prompt.dsl/Prompt, ai.jetbrains.code.prompt.llm/LLModel): kotlin/String // ai.grazie.code.agents.core.feature/PromptExecutorProxy.execute|execute(ai.jetbrains.code.prompt.dsl.Prompt;ai.jetbrains.code.prompt.llm.LLModel){}[0]
    final suspend fun execute(ai.jetbrains.code.prompt.dsl/Prompt, ai.jetbrains.code.prompt.llm/LLModel, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>): kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.feature/PromptExecutorProxy.execute|execute(ai.jetbrains.code.prompt.dsl.Prompt;ai.jetbrains.code.prompt.llm.LLModel;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    final suspend fun executeStreaming(ai.jetbrains.code.prompt.dsl/Prompt, ai.jetbrains.code.prompt.llm/LLModel): kotlinx.coroutines.flow/Flow<kotlin/String> // ai.grazie.code.agents.core.feature/PromptExecutorProxy.executeStreaming|executeStreaming(ai.jetbrains.code.prompt.dsl.Prompt;ai.jetbrains.code.prompt.llm.LLModel){}[0]
}

final class ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt { // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt|null[0]
    constructor <init>(kotlin/String) // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt.<init>|<init>(kotlin.String){}[0]

    final object Companion { // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt> // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt.Companion.serializer|serializer(){}[0]
    }

    final object Serializer : kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt> { // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt.Serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt.Serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt.Serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt.Serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt) // ai.grazie.code.agents.core.model.agent/AIAgentSystemPrompt.Serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.agent.AIAgentSystemPrompt){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent : ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentContent { // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent|null[0]
    constructor <init>(kotlin/String, kotlin/String, ai.grazie.code.agents.core.agent.config/AIAgentConfig) // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.<init>|<init>(kotlin.String;kotlin.String;ai.grazie.code.agents.core.agent.config.AIAgentConfig){}[0]

    final val agentId // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.agentId|{}agentId[0]
        final fun <get-agentId>(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.agentId.<get-agentId>|<get-agentId>(){}[0]
    final val config // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.config|{}config[0]
        final fun <get-config>(): ai.grazie.code.agents.core.agent.config/AIAgentConfig // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.config.<get-config>|<get-config>(){}[0]
    final val message // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.message|{}message[0]
        final fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.message.<get-message>|<get-message>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.component2|component2(){}[0]
    final fun component3(): ai.grazie.code.agents.core.agent.config/AIAgentConfig // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.component3|component3(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., ai.grazie.code.agents.core.agent.config/AIAgentConfig = ...): ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.copy|copy(kotlin.String;kotlin.String;ai.grazie.code.agents.core.agent.config.AIAgentConfig){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent.toString|toString(){}[0]
}

final class ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage : ai.grazie.code.agents.core.model.message/EnvironmentInitializeToAgentMessage { // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage|null[0]
    constructor <init>(ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent, kotlin.collections/Map<kotlin/String, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>>, ai.grazie.code.agents.core.agent.entity/AIAgentStrategy) // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.<init>|<init>(ai.grazie.code.agents.core.model.message.AIAgentEnvironmentInitializeMessageContent;kotlin.collections.Map<kotlin.String,kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>>;ai.grazie.code.agents.core.agent.entity.AIAgentStrategy){}[0]

    final val agent // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.agent|{}agent[0]
        final fun <get-agent>(): ai.grazie.code.agents.core.agent.entity/AIAgentStrategy // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.agent.<get-agent>|<get-agent>(){}[0]
    final val content // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.content|{}content[0]
        final fun <get-content>(): ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.content.<get-content>|<get-content>(){}[0]
    final val toolsForStages // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.toolsForStages|{}toolsForStages[0]
        final fun <get-toolsForStages>(): kotlin.collections/Map<kotlin/String, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>> // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.toolsForStages.<get-toolsForStages>|<get-toolsForStages>(){}[0]

    final fun component1(): ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.component1|component1(){}[0]
    final fun component2(): kotlin.collections/Map<kotlin/String, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>> // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.component2|component2(){}[0]
    final fun component3(): ai.grazie.code.agents.core.agent.entity/AIAgentStrategy // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.component3|component3(){}[0]
    final fun copy(ai.grazie.code.agents.core.model.message/AIAgentEnvironmentInitializeMessageContent = ..., kotlin.collections/Map<kotlin/String, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>> = ..., ai.grazie.code.agents.core.agent.entity/AIAgentStrategy = ...): ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.copy|copy(ai.grazie.code.agents.core.model.message.AIAgentEnvironmentInitializeMessageContent;kotlin.collections.Map<kotlin.String,kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>>;ai.grazie.code.agents.core.agent.entity.AIAgentStrategy){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToAgentInitializeMessage.toString|toString(){}[0]
}

final class ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent : ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent { // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent|null[0]
    constructor <init>(kotlin/String?, kotlin/String, kotlin/String, kotlin/String, ai.grazie.code.agents.core.tools/ToolResult? = ...) // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.<init>|<init>(kotlin.String?;kotlin.String;kotlin.String;kotlin.String;ai.grazie.code.agents.core.tools.ToolResult?){}[0]

    final val agentId // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.agentId|{}agentId[0]
        final fun <get-agentId>(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.agentId.<get-agentId>|<get-agentId>(){}[0]
    final val message // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.message|{}message[0]
        final fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.message.<get-message>|<get-message>(){}[0]
    final val toolCallId // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.toolCallId|{}toolCallId[0]
        final fun <get-toolCallId>(): kotlin/String? // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.toolCallId.<get-toolCallId>|<get-toolCallId>(){}[0]
    final val toolName // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.toolName|{}toolName[0]
        final fun <get-toolName>(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.toolName.<get-toolName>|<get-toolName>(){}[0]
    final val toolResult // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.toolResult|{}toolResult[0]
        final fun <get-toolResult>(): ai.grazie.code.agents.core.tools/ToolResult? // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.toolResult.<get-toolResult>|<get-toolResult>(){}[0]

    final fun component1(): kotlin/String? // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.component3|component3(){}[0]
    final fun component4(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.component4|component4(){}[0]
    final fun component5(): ai.grazie.code.agents.core.tools/ToolResult? // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.component5|component5(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ..., ai.grazie.code.agents.core.tools/ToolResult? = ...): ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.copy|copy(kotlin.String?;kotlin.String;kotlin.String;kotlin.String;ai.grazie.code.agents.core.tools.ToolResult?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent.toString|toString(){}[0]
}

final class ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage : ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage { // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage|null[0]
    constructor <init>(ai.grazie.utils.mpp/UUID, ai.grazie.code.agents.core.model/AgentServiceError) // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.<init>|<init>(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.AgentServiceError){}[0]

    final val error // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.error|{}error[0]
        final fun <get-error>(): ai.grazie.code.agents.core.model/AgentServiceError // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.error.<get-error>|<get-error>(){}[0]
    final val sessionUuid // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.sessionUuid|{}sessionUuid[0]
        final fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final fun component1(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.model/AgentServiceError // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.component2|component2(){}[0]
    final fun copy(ai.grazie.utils.mpp/UUID = ..., ai.grazie.code.agents.core.model/AgentServiceError = ...): ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.copy|copy(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.AgentServiceError){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage> { // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage) // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.AgentErrorToEnvironmentMessage){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage> // ai.grazie.code.agents.core.model.message/AgentErrorToEnvironmentMessage.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage : ai.grazie.code.agents.core.model.message/AgentToEnvironmentMessage { // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage|null[0]
    constructor <init>(ai.grazie.utils.mpp/UUID, ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent? = ..., ai.grazie.code.agents.core.model/AgentServiceError? = ...) // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.<init>|<init>(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.message.AgentToolCallToEnvironmentContent?;ai.grazie.code.agents.core.model.AgentServiceError?){}[0]

    final val content // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.content|{}content[0]
        final fun <get-content>(): ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent? // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.content.<get-content>|<get-content>(){}[0]
    final val error // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.error|{}error[0]
        final fun <get-error>(): ai.grazie.code.agents.core.model/AgentServiceError? // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.error.<get-error>|<get-error>(){}[0]
    final val sessionUuid // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.sessionUuid|{}sessionUuid[0]
        final fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final fun component1(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent? // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.component2|component2(){}[0]
    final fun component3(): ai.grazie.code.agents.core.model/AgentServiceError? // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.component3|component3(){}[0]
    final fun copy(ai.grazie.utils.mpp/UUID = ..., ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent? = ..., ai.grazie.code.agents.core.model/AgentServiceError? = ...): ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.copy|copy(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.message.AgentToolCallToEnvironmentContent?;ai.grazie.code.agents.core.model.AgentServiceError?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage> { // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage) // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.AgentTerminationToEnvironmentMessage){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage> // ai.grazie.code.agents.core.model.message/AgentTerminationToEnvironmentMessage.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent { // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent|null[0]
    constructor <init>(kotlin/String, kotlin/String?, kotlin/String, kotlinx.serialization.json/JsonObject) // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.<init>|<init>(kotlin.String;kotlin.String?;kotlin.String;kotlinx.serialization.json.JsonObject){}[0]

    final val agentId // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.agentId|{}agentId[0]
        final fun <get-agentId>(): kotlin/String // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.agentId.<get-agentId>|<get-agentId>(){}[0]
    final val toolArgs // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.toolArgs|{}toolArgs[0]
        final fun <get-toolArgs>(): kotlinx.serialization.json/JsonObject // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.toolArgs.<get-toolArgs>|<get-toolArgs>(){}[0]
    final val toolCallId // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.toolCallId|{}toolCallId[0]
        final fun <get-toolCallId>(): kotlin/String? // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.toolCallId.<get-toolCallId>|<get-toolCallId>(){}[0]
    final val toolName // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.toolName|{}toolName[0]
        final fun <get-toolName>(): kotlin/String // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.toolName.<get-toolName>|<get-toolName>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.component1|component1(){}[0]
    final fun component2(): kotlin/String? // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.component2|component2(){}[0]
    final fun component3(): kotlin/String // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.component3|component3(){}[0]
    final fun component4(): kotlinx.serialization.json/JsonObject // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.component4|component4(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String? = ..., kotlin/String = ..., kotlinx.serialization.json/JsonObject = ...): ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.copy|copy(kotlin.String;kotlin.String?;kotlin.String;kotlinx.serialization.json.JsonObject){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent> { // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent) // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.AgentToolCallToEnvironmentContent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent> // ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage : ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentMessage { // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage|null[0]
    constructor <init>(ai.grazie.utils.mpp/UUID, kotlin.collections/List<ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent>) // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.<init>|<init>(ai.grazie.utils.mpp.UUID;kotlin.collections.List<ai.grazie.code.agents.core.model.message.AgentToolCallToEnvironmentContent>){}[0]

    final val content // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.content|{}content[0]
        final fun <get-content>(): kotlin.collections/List<ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent> // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.content.<get-content>|<get-content>(){}[0]
    final val sessionUuid // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.sessionUuid|{}sessionUuid[0]
        final fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final fun component1(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent> // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.component2|component2(){}[0]
    final fun copy(ai.grazie.utils.mpp/UUID = ..., kotlin.collections/List<ai.grazie.code.agents.core.model.message/AgentToolCallToEnvironmentContent> = ...): ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.copy|copy(ai.grazie.utils.mpp.UUID;kotlin.collections.List<ai.grazie.code.agents.core.model.message.AgentToolCallToEnvironmentContent>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage> { // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage) // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.AgentToolCallsToEnvironmentMessage){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage> // ai.grazie.code.agents.core.model.message/AgentToolCallsToEnvironmentMessage.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage : ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage|null[0]
    constructor <init>(ai.grazie.utils.mpp/UUID, ai.grazie.code.agents.core.model/AgentServiceError) // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.<init>|<init>(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.AgentServiceError){}[0]

    final val error // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.error|{}error[0]
        final fun <get-error>(): ai.grazie.code.agents.core.model/AgentServiceError // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.error.<get-error>|<get-error>(){}[0]
    final val sessionUuid // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.sessionUuid|{}sessionUuid[0]
        final fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final fun component1(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.model/AgentServiceError // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.component2|component2(){}[0]
    final fun copy(ai.grazie.utils.mpp/UUID = ..., ai.grazie.code.agents.core.model/AgentServiceError = ...): ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.copy|copy(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.AgentServiceError){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage> { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage) // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.EnvironmentToAgentErrorMessage){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentErrorMessage.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent : ai.grazie.code.agents.core.model.message/EnvironmentToAgentContent { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent|null[0]
    constructor <init>(kotlin/String, kotlin/String = ...) // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final val agentId // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.agentId|{}agentId[0]
        final fun <get-agentId>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.agentId.<get-agentId>|<get-agentId>(){}[0]
    final val message // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.message|{}message[0]
        final fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.message.<get-message>|<get-message>(){}[0]

    final fun component1(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent> { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent) // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.EnvironmentToAgentTerminationContent){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage : ai.grazie.code.agents.core.model.message/EnvironmentToAgentMessage { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage|null[0]
    constructor <init>(ai.grazie.utils.mpp/UUID, ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent? = ..., ai.grazie.code.agents.core.model/AgentServiceError? = ...) // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.<init>|<init>(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.message.EnvironmentToAgentTerminationContent?;ai.grazie.code.agents.core.model.AgentServiceError?){}[0]

    final val content // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.content|{}content[0]
        final fun <get-content>(): ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent? // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.content.<get-content>|<get-content>(){}[0]
    final val error // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.error|{}error[0]
        final fun <get-error>(): ai.grazie.code.agents.core.model/AgentServiceError? // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.error.<get-error>|<get-error>(){}[0]
    final val sessionUuid // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.sessionUuid|{}sessionUuid[0]
        final fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final fun component1(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent? // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.component2|component2(){}[0]
    final fun component3(): ai.grazie.code.agents.core.model/AgentServiceError? // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.component3|component3(){}[0]
    final fun copy(ai.grazie.utils.mpp/UUID = ..., ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationContent? = ..., ai.grazie.code.agents.core.model/AgentServiceError? = ...): ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.copy|copy(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.message.EnvironmentToAgentTerminationContent?;ai.grazie.code.agents.core.model.AgentServiceError?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage> { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage) // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.EnvironmentToAgentTerminationMessage){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage> // ai.grazie.code.agents.core.model.message/EnvironmentToAgentTerminationMessage.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage : ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage|null[0]
    constructor <init>(ai.grazie.utils.mpp/UUID, kotlin.collections/List<ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent>) // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.<init>|<init>(ai.grazie.utils.mpp.UUID;kotlin.collections.List<ai.grazie.code.agents.core.model.message.EnvironmentToolResultToAgentContent>){}[0]

    final val content // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.content|{}content[0]
        final fun <get-content>(): kotlin.collections/List<ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.content.<get-content>|<get-content>(){}[0]
    final val sessionUuid // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.sessionUuid|{}sessionUuid[0]
        final fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final fun component1(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.component2|component2(){}[0]
    final fun copy(ai.grazie.utils.mpp/UUID = ..., kotlin.collections/List<ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent> = ...): ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.copy|copy(ai.grazie.utils.mpp.UUID;kotlin.collections.List<ai.grazie.code.agents.core.model.message.EnvironmentToolResultToAgentContent>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage> { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage) // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.EnvironmentToolResultMultipleToAgentMessage){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultMultipleToAgentMessage.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage : ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentMessage { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage|null[0]
    constructor <init>(ai.grazie.utils.mpp/UUID, ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent) // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.<init>|<init>(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.message.EnvironmentToolResultToAgentContent){}[0]

    final val content // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.content|{}content[0]
        final fun <get-content>(): ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.content.<get-content>|<get-content>(){}[0]
    final val sessionUuid // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.sessionUuid|{}sessionUuid[0]
        final fun <get-sessionUuid>(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.sessionUuid.<get-sessionUuid>|<get-sessionUuid>(){}[0]

    final fun component1(): ai.grazie.utils.mpp/UUID // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.component1|component1(){}[0]
    final fun component2(): ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.component2|component2(){}[0]
    final fun copy(ai.grazie.utils.mpp/UUID = ..., ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent = ...): ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.copy|copy(ai.grazie.utils.mpp.UUID;ai.grazie.code.agents.core.model.message.EnvironmentToolResultToAgentContent){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage> { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage) // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.message.EnvironmentToolResultSingleToAgentMessage){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage> // ai.grazie.code.agents.core.model.message/EnvironmentToolResultSingleToAgentMessage.Companion.serializer|serializer(){}[0]
    }
}

final class ai.grazie.code.agents.core.model/AgentServiceError { // ai.grazie.code.agents.core.model/AgentServiceError|null[0]
    constructor <init>(ai.grazie.code.agents.core.model/AgentServiceErrorType, kotlin/String) // ai.grazie.code.agents.core.model/AgentServiceError.<init>|<init>(ai.grazie.code.agents.core.model.AgentServiceErrorType;kotlin.String){}[0]

    final val message // ai.grazie.code.agents.core.model/AgentServiceError.message|{}message[0]
        final fun <get-message>(): kotlin/String // ai.grazie.code.agents.core.model/AgentServiceError.message.<get-message>|<get-message>(){}[0]
    final val type // ai.grazie.code.agents.core.model/AgentServiceError.type|{}type[0]
        final fun <get-type>(): ai.grazie.code.agents.core.model/AgentServiceErrorType // ai.grazie.code.agents.core.model/AgentServiceError.type.<get-type>|<get-type>(){}[0]

    final fun asException(): ai.grazie.code.agents.core.exception/AgentEngineException // ai.grazie.code.agents.core.model/AgentServiceError.asException|asException(){}[0]
    final fun component1(): ai.grazie.code.agents.core.model/AgentServiceErrorType // ai.grazie.code.agents.core.model/AgentServiceError.component1|component1(){}[0]
    final fun component2(): kotlin/String // ai.grazie.code.agents.core.model/AgentServiceError.component2|component2(){}[0]
    final fun copy(ai.grazie.code.agents.core.model/AgentServiceErrorType = ..., kotlin/String = ...): ai.grazie.code.agents.core.model/AgentServiceError // ai.grazie.code.agents.core.model/AgentServiceError.copy|copy(ai.grazie.code.agents.core.model.AgentServiceErrorType;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // ai.grazie.code.agents.core.model/AgentServiceError.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // ai.grazie.code.agents.core.model/AgentServiceError.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // ai.grazie.code.agents.core.model/AgentServiceError.toString|toString(){}[0]

    final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<ai.grazie.code.agents.core.model/AgentServiceError> { // ai.grazie.code.agents.core.model/AgentServiceError.$serializer|null[0]
        final val descriptor // ai.grazie.code.agents.core.model/AgentServiceError.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // ai.grazie.code.agents.core.model/AgentServiceError.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // ai.grazie.code.agents.core.model/AgentServiceError.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): ai.grazie.code.agents.core.model/AgentServiceError // ai.grazie.code.agents.core.model/AgentServiceError.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, ai.grazie.code.agents.core.model/AgentServiceError) // ai.grazie.code.agents.core.model/AgentServiceError.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;ai.grazie.code.agents.core.model.AgentServiceError){}[0]
    }

    final object Companion { // ai.grazie.code.agents.core.model/AgentServiceError.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.model/AgentServiceError.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.model/AgentServiceError> // ai.grazie.code.agents.core.model/AgentServiceError.Companion.serializer|serializer(){}[0]
    }
}

open class <#A: kotlin/Any?, #B: kotlin/Any?> ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph : ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#A, #B> { // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph|null[0]
    constructor <init>(kotlin/String, ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase<#A>, ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase<#B>, ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy) // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.<init>|<init>(kotlin.String;ai.grazie.code.agents.core.agent.entity.StartAIAgentNodeBase<1:0>;ai.grazie.code.agents.core.agent.entity.FinishAIAgentNodeBase<1:1>;ai.grazie.code.agents.core.agent.entity.ToolSelectionStrategy){}[0]

    final val finish // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.finish|{}finish[0]
        final fun <get-finish>(): ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase<#B> // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.finish.<get-finish>|<get-finish>(){}[0]
    final val start // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.start|{}start[0]
        final fun <get-start>(): ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase<#A> // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.start.<get-start>|<get-start>(){}[0]
    open val name // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.name|{}name[0]
        open fun <get-name>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.name.<get-name>|<get-name>(){}[0]

    final suspend fun doExecute(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #A): #B // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.doExecute|doExecute(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;1:0){}[0]
    open suspend fun execute(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #A): #B // ai.grazie.code.agents.core.agent.entity/AIAgentSubgraph.execute|execute(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;1:0){}[0]
}

open class <#A: kotlin/Any?, #B: kotlin/Any?> ai.grazie.code.agents.core.dsl.builder/AIAgentNodeBuilder : ai.grazie.code.agents.core.dsl.builder/BaseBuilder<ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#A, #B>> { // ai.grazie.code.agents.core.dsl.builder/AIAgentNodeBuilder|null[0]
    final var name // ai.grazie.code.agents.core.dsl.builder/AIAgentNodeBuilder.name|{}name[0]
        final fun <get-name>(): kotlin/String // ai.grazie.code.agents.core.dsl.builder/AIAgentNodeBuilder.name.<get-name>|<get-name>(){}[0]
        final fun <set-name>(kotlin/String) // ai.grazie.code.agents.core.dsl.builder/AIAgentNodeBuilder.name.<set-name>|<set-name>(kotlin.String){}[0]

    open fun build(): ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#A, #B> // ai.grazie.code.agents.core.dsl.builder/AIAgentNodeBuilder.build|build(){}[0]
}

open class <#A: kotlin/Any?> ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase : ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#A, #A> { // ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase|null[0]
    constructor <init>() // ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase.<init>|<init>(){}[0]

    open val name // ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase.name|{}name[0]
        open fun <get-name>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase.name.<get-name>|<get-name>(){}[0]

    final var subgraphName // ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase.subgraphName|{}subgraphName[0]
        final fun <get-subgraphName>(): kotlin/String? // ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase.subgraphName.<get-subgraphName>|<get-subgraphName>(){}[0]

    open fun addEdge(ai.grazie.code.agents.core.agent.entity/AIAgentEdge<#A, *>) // ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase.addEdge|addEdge(ai.grazie.code.agents.core.agent.entity.AIAgentEdge<1:0,*>){}[0]
    open suspend fun execute(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #A): #A // ai.grazie.code.agents.core.agent.entity/FinishAIAgentNodeBase.execute|execute(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;1:0){}[0]
}

open class <#A: kotlin/Any?> ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase : ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#A, #A> { // ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase|null[0]
    constructor <init>() // ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase.<init>|<init>(){}[0]

    open val name // ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase.name|{}name[0]
        open fun <get-name>(): kotlin/String // ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase.name.<get-name>|<get-name>(){}[0]

    final var subgraphName // ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase.subgraphName|{}subgraphName[0]
        final fun <get-subgraphName>(): kotlin/String? // ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase.subgraphName.<get-subgraphName>|<get-subgraphName>(){}[0]

    open suspend fun execute(ai.grazie.code.agents.core.agent.entity/AIAgentContextBase, #A): #A // ai.grazie.code.agents.core.agent.entity/StartAIAgentNodeBase.execute|execute(ai.grazie.code.agents.core.agent.entity.AIAgentContextBase;1:0){}[0]
}

open class ai.grazie.code.agents.core.agent.config/AIAgentConfig : ai.grazie.code.agents.core.model.agent/AIAgentConfig { // ai.grazie.code.agents.core.agent.config/AIAgentConfig|null[0]
    constructor <init>(ai.jetbrains.code.prompt.dsl/Prompt, ai.jetbrains.code.prompt.llm/LLModel, kotlin/Int, ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy = ...) // ai.grazie.code.agents.core.agent.config/AIAgentConfig.<init>|<init>(ai.jetbrains.code.prompt.dsl.Prompt;ai.jetbrains.code.prompt.llm.LLModel;kotlin.Int;ai.grazie.code.agents.core.agent.config.MissingToolsConversionStrategy){}[0]

    final val maxAgentIterations // ai.grazie.code.agents.core.agent.config/AIAgentConfig.maxAgentIterations|{}maxAgentIterations[0]
        final fun <get-maxAgentIterations>(): kotlin/Int // ai.grazie.code.agents.core.agent.config/AIAgentConfig.maxAgentIterations.<get-maxAgentIterations>|<get-maxAgentIterations>(){}[0]
    final val missingToolsConversionStrategy // ai.grazie.code.agents.core.agent.config/AIAgentConfig.missingToolsConversionStrategy|{}missingToolsConversionStrategy[0]
        final fun <get-missingToolsConversionStrategy>(): ai.grazie.code.agents.core.agent.config/MissingToolsConversionStrategy // ai.grazie.code.agents.core.agent.config/AIAgentConfig.missingToolsConversionStrategy.<get-missingToolsConversionStrategy>|<get-missingToolsConversionStrategy>(){}[0]
    final val model // ai.grazie.code.agents.core.agent.config/AIAgentConfig.model|{}model[0]
        final fun <get-model>(): ai.jetbrains.code.prompt.llm/LLModel // ai.grazie.code.agents.core.agent.config/AIAgentConfig.model.<get-model>|<get-model>(){}[0]
    final val prompt // ai.grazie.code.agents.core.agent.config/AIAgentConfig.prompt|{}prompt[0]
        final fun <get-prompt>(): ai.jetbrains.code.prompt.dsl/Prompt // ai.grazie.code.agents.core.agent.config/AIAgentConfig.prompt.<get-prompt>|<get-prompt>(){}[0]

    final object Companion { // ai.grazie.code.agents.core.agent.config/AIAgentConfig.Companion|null[0]
        final fun withSystemPrompt(kotlin/String, ai.jetbrains.code.prompt.llm/LLModel = ..., kotlin/String = ..., kotlin/Int = ...): ai.grazie.code.agents.core.agent.config/AIAgentConfig // ai.grazie.code.agents.core.agent.config/AIAgentConfig.Companion.withSystemPrompt|withSystemPrompt(kotlin.String;ai.jetbrains.code.prompt.llm.LLModel;kotlin.String;kotlin.Int){}[0]
    }
}

open class ai.grazie.code.agents.core.agent/AIAgent : ai.grazie.code.agents.core.agent/AIAgentBase, ai.grazie.code.agents.core.environment/AIAgentEnvironment, ai.grazie.code.agents.utils/Closeable { // ai.grazie.code.agents.core.agent/AIAgent|null[0]
    constructor <init>(ai.jetbrains.code.prompt.executor.model/PromptExecutor, ai.grazie.code.agents.core.agent.entity/AIAgentStrategy, ai.grazie.code.agents.core.agent.config/AIAgentConfig, ai.grazie.code.agents.core.tools/ToolRegistry = ..., kotlin/Function1<ai.grazie.code.agents.core.agent/AIAgent.FeatureContext, kotlin/Unit> = ...) // ai.grazie.code.agents.core.agent/AIAgent.<init>|<init>(ai.jetbrains.code.prompt.executor.model.PromptExecutor;ai.grazie.code.agents.core.agent.entity.AIAgentStrategy;ai.grazie.code.agents.core.agent.config.AIAgentConfig;ai.grazie.code.agents.core.tools.ToolRegistry;kotlin.Function1<ai.grazie.code.agents.core.agent.AIAgent.FeatureContext,kotlin.Unit>){}[0]

    final val agentConfig // ai.grazie.code.agents.core.agent/AIAgent.agentConfig|{}agentConfig[0]
        final fun <get-agentConfig>(): ai.grazie.code.agents.core.agent.config/AIAgentConfig // ai.grazie.code.agents.core.agent/AIAgent.agentConfig.<get-agentConfig>|<get-agentConfig>(){}[0]
    final val promptExecutor // ai.grazie.code.agents.core.agent/AIAgent.promptExecutor|{}promptExecutor[0]
        final fun <get-promptExecutor>(): ai.jetbrains.code.prompt.executor.model/PromptExecutor // ai.grazie.code.agents.core.agent/AIAgent.promptExecutor.<get-promptExecutor>|<get-promptExecutor>(){}[0]
    final val toolRegistry // ai.grazie.code.agents.core.agent/AIAgent.toolRegistry|{}toolRegistry[0]
        final fun <get-toolRegistry>(): ai.grazie.code.agents.core.tools/ToolRegistry // ai.grazie.code.agents.core.agent/AIAgent.toolRegistry.<get-toolRegistry>|<get-toolRegistry>(){}[0]

    final suspend fun run(kotlin.coroutines/SuspendFunction1<ai.jetbrains.code.prompt.text/TextContentBuilder, kotlin/Unit>) // ai.grazie.code.agents.core.agent/AIAgent.run|run(kotlin.coroutines.SuspendFunction1<ai.jetbrains.code.prompt.text.TextContentBuilder,kotlin.Unit>){}[0]
    open suspend fun close() // ai.grazie.code.agents.core.agent/AIAgent.close|close(){}[0]
    open suspend fun executeTools(kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Tool.Call>): kotlin.collections/List<ai.grazie.code.agents.core.environment/ReceivedToolResult> // ai.grazie.code.agents.core.agent/AIAgent.executeTools|executeTools(kotlin.collections.List<ai.jetbrains.code.prompt.message.Message.Tool.Call>){}[0]
    open suspend fun reportProblem(kotlin/Throwable) // ai.grazie.code.agents.core.agent/AIAgent.reportProblem|reportProblem(kotlin.Throwable){}[0]
    open suspend fun run(kotlin/String) // ai.grazie.code.agents.core.agent/AIAgent.run|run(kotlin.String){}[0]
    open suspend fun runAndGetResult(kotlin/String): kotlin/String? // ai.grazie.code.agents.core.agent/AIAgent.runAndGetResult|runAndGetResult(kotlin.String){}[0]
    open suspend fun sendTermination(kotlin/String?) // ai.grazie.code.agents.core.agent/AIAgent.sendTermination|sendTermination(kotlin.String?){}[0]

    final class FeatureContext { // ai.grazie.code.agents.core.agent/AIAgent.FeatureContext|null[0]
        final fun <#A2: ai.grazie.code.agents.local.features.common.config/FeatureConfig, #B2: kotlin/Any> install(ai.grazie.code.agents.core.feature/AIAgentFeature<#A2, #B2>, kotlin/Function1<#A2, kotlin/Unit> = ...) // ai.grazie.code.agents.core.agent/AIAgent.FeatureContext.install|install(ai.grazie.code.agents.core.feature.AIAgentFeature<0:0,0:1>;kotlin.Function1<0:0,kotlin.Unit>){0§<ai.grazie.code.agents.local.features.common.config.FeatureConfig>;1§<kotlin.Any>}[0]
    }
}

open class ai.grazie.code.agents.core.agent/AIAgentException : kotlin/Throwable { // ai.grazie.code.agents.core.agent/AIAgentException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable? = ...) // ai.grazie.code.agents.core.agent/AIAgentException.<init>|<init>(kotlin.String;kotlin.Throwable?){}[0]
}

sealed class ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession : kotlin/AutoCloseable { // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession|null[0]
    final val config // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.config|{}config[0]
        final fun <get-config>(): ai.grazie.code.agents.core.agent.config/AIAgentConfig // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.config.<get-config>|<get-config>(){}[0]
    final val executor // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.executor|{}executor[0]
        final fun <get-executor>(): ai.jetbrains.code.prompt.executor.model/PromptExecutor // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.executor.<get-executor>|<get-executor>(){}[0]
    open val model // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.model|{}model[0]
        open fun <get-model>(): ai.jetbrains.code.prompt.llm/LLModel // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.model.<get-model>|<get-model>(){}[0]
    open val prompt // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.prompt|{}prompt[0]
        open fun <get-prompt>(): ai.jetbrains.code.prompt.dsl/Prompt // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.prompt.<get-prompt>|<get-prompt>(){}[0]
    open val tools // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.tools|{}tools[0]
        open fun <get-tools>(): kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.tools.<get-tools>|<get-tools>(){}[0]

    final var isActive // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.isActive|{}isActive[0]
        final fun <get-isActive>(): kotlin/Boolean // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.isActive.<get-isActive>|<get-isActive>(){}[0]
        final fun <set-isActive>(kotlin/Boolean) // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.isActive.<set-isActive>|<set-isActive>(kotlin.Boolean){}[0]

    final fun close() // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.close|close(){}[0]
    final fun preparePrompt(ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>): ai.jetbrains.code.prompt.dsl/Prompt // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.preparePrompt|preparePrompt(ai.jetbrains.code.prompt.dsl.Prompt;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    final fun validateSession() // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.validateSession|validateSession(){}[0]
    final suspend fun executeMultiple(ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>): kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.executeMultiple|executeMultiple(ai.jetbrains.code.prompt.dsl.Prompt;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    final suspend fun executeSingle(ai.jetbrains.code.prompt.dsl/Prompt, kotlin.collections/List<ai.grazie.code.agents.core.tools/ToolDescriptor>): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.executeSingle|executeSingle(ai.jetbrains.code.prompt.dsl.Prompt;kotlin.collections.List<ai.grazie.code.agents.core.tools.ToolDescriptor>){}[0]
    open suspend fun <#A1: kotlin/Any?> requestLLMStructured(ai.grazie.code.prompt.structure/StructuredData<#A1>, kotlin/Int = ..., ai.jetbrains.code.prompt.llm/LLModel = ...): kotlin/Result<ai.grazie.code.prompt.structure/StructuredResponse<#A1>> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.requestLLMStructured|requestLLMStructured(ai.grazie.code.prompt.structure.StructuredData<0:0>;kotlin.Int;ai.jetbrains.code.prompt.llm.LLModel){0§<kotlin.Any?>}[0]
    open suspend fun <#A1: kotlin/Any?> requestLLMStructuredOneShot(ai.grazie.code.prompt.structure/StructuredData<#A1>): ai.grazie.code.prompt.structure/StructuredResponse<#A1> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.requestLLMStructuredOneShot|requestLLMStructuredOneShot(ai.grazie.code.prompt.structure.StructuredData<0:0>){0§<kotlin.Any?>}[0]
    open suspend fun requestLLM(): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.requestLLM|requestLLM(){}[0]
    open suspend fun requestLLMForceOneTool(ai.grazie.code.agents.core.tools/Tool<*, *>): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.requestLLMForceOneTool|requestLLMForceOneTool(ai.grazie.code.agents.core.tools.Tool<*,*>){}[0]
    open suspend fun requestLLMForceOneTool(ai.grazie.code.agents.core.tools/ToolDescriptor): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.requestLLMForceOneTool|requestLLMForceOneTool(ai.grazie.code.agents.core.tools.ToolDescriptor){}[0]
    open suspend fun requestLLMMultiple(): kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.requestLLMMultiple|requestLLMMultiple(){}[0]
    open suspend fun requestLLMOnlyCallingTools(): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.requestLLMOnlyCallingTools|requestLLMOnlyCallingTools(){}[0]
    open suspend fun requestLLMWithoutTools(): ai.jetbrains.code.prompt.message/Message.Response // ai.grazie.code.agents.core.agent.entity/AIAgentLLMSession.requestLLMWithoutTools|requestLLMWithoutTools(){}[0]
}

sealed class ai.grazie.code.agents.core.exception/AgentEngineException : ai.grazie.code.agents.core.exception/AgentRuntimeException // ai.grazie.code.agents.core.exception/AgentEngineException|null[0]

sealed class ai.grazie.code.agents.core.exception/AgentRuntimeException : kotlin/RuntimeException // ai.grazie.code.agents.core.exception/AgentRuntimeException|null[0]

sealed class ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent : ai.grazie.code.agents.local.features.common.message/FeatureEvent { // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent|null[0]
    open val messageType // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent.messageType|{}messageType[0]
        open fun <get-messageType>(): ai.grazie.code.agents.local.features.common.message/FeatureMessage.Type // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent.messageType.<get-messageType>|<get-messageType>(){}[0]
    open val timestamp // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent.timestamp|{}timestamp[0]
        open fun <get-timestamp>(): kotlin/Long // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent.timestamp.<get-timestamp>|<get-timestamp>(){}[0]

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent.Companion|null[0]
        final val $childSerializers // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent.Companion.$childSerializers|{}$childSerializers[0]

        final fun serializer(): kotlinx.serialization/KSerializer<ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent> // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // ai.grazie.code.agents.core.feature.model/DefinedFeatureEvent.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final object ai.grazie.code.agents.core.environment/TerminationTool { // ai.grazie.code.agents.core.environment/TerminationTool|null[0]
    final const val ARG // ai.grazie.code.agents.core.environment/TerminationTool.ARG|{}ARG[0]
        final fun <get-ARG>(): kotlin/String // ai.grazie.code.agents.core.environment/TerminationTool.ARG.<get-ARG>|<get-ARG>(){}[0]
    final const val NAME // ai.grazie.code.agents.core.environment/TerminationTool.NAME|{}NAME[0]
        final fun <get-NAME>(): kotlin/String // ai.grazie.code.agents.core.environment/TerminationTool.NAME.<get-NAME>|<get-NAME>(){}[0]
}

final val ai.grazie.code.agents.core.feature/agentFeatureMessageSerializersModule // ai.grazie.code.agents.core.feature/agentFeatureMessageSerializersModule|{}agentFeatureMessageSerializersModule[0]
    final fun <get-agentFeatureMessageSerializersModule>(): kotlinx.serialization.modules/SerializersModule // ai.grazie.code.agents.core.feature/agentFeatureMessageSerializersModule.<get-agentFeatureMessageSerializersModule>|<get-agentFeatureMessageSerializersModule>(){}[0]

final fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/clearHistory() // ai.grazie.code.agents.core.dsl.extension/clearHistory|clearHistory@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(){}[0]
final fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/leaveLastNMessages(kotlin/Int) // ai.grazie.code.agents.core.dsl.extension/leaveLastNMessages|leaveLastNMessages@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(kotlin.Int){}[0]
final fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/setToolChoice(ai.jetbrains.code.prompt.params/LLMParams.ToolChoice?) // ai.grazie.code.agents.core.dsl.extension/setToolChoice|setToolChoice@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(ai.jetbrains.code.prompt.params.LLMParams.ToolChoice?){}[0]
final fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/setToolChoiceAuto() // ai.grazie.code.agents.core.dsl.extension/setToolChoiceAuto|setToolChoiceAuto@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(){}[0]
final fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/setToolChoiceNamed(kotlin/String) // ai.grazie.code.agents.core.dsl.extension/setToolChoiceNamed|setToolChoiceNamed@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(kotlin.String){}[0]
final fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/setToolChoiceNone() // ai.grazie.code.agents.core.dsl.extension/setToolChoiceNone|setToolChoiceNone@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(){}[0]
final fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/setToolChoiceRequired() // ai.grazie.code.agents.core.dsl.extension/setToolChoiceRequired|setToolChoiceRequired@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(){}[0]
final fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/unsetToolChoice() // ai.grazie.code.agents.core.dsl.extension/unsetToolChoice|unsetToolChoice@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(){}[0]
final fun (ai.grazie.code.agents.core.agent/AIAgentBase).ai.grazie.code.agents.core.agent/asTool(kotlin/String, kotlin/String? = ..., kotlin/String = ...): ai.grazie.code.agents.core.tools/Tool<ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolArgs, ai.grazie.code.agents.core.agent/AIAgentTool.AgentToolResult> // ai.grazie.code.agents.core.agent/asTool|asTool@ai.grazie.code.agents.core.agent.AIAgentBase(kotlin.String;kotlin.String?;kotlin.String){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeExecuteMultipleTools(kotlin/String? = ..., kotlin/Boolean = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Tool.Call>, kotlin.collections/List<ai.grazie.code.agents.core.environment/ReceivedToolResult>> // ai.grazie.code.agents.core.dsl.extension/nodeExecuteMultipleTools|nodeExecuteMultipleTools@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;kotlin.Boolean){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeExecuteTool(kotlin/String? = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<ai.jetbrains.code.prompt.message/Message.Tool.Call, ai.grazie.code.agents.core.environment/ReceivedToolResult> // ai.grazie.code.agents.core.dsl.extension/nodeExecuteTool|nodeExecuteTool@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMRequest(kotlin/String? = ..., kotlin/Boolean = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/String, ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.dsl.extension/nodeLLMRequest|nodeLLMRequest@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;kotlin.Boolean){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMRequestMultiple(kotlin/String? = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/String, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response>> // ai.grazie.code.agents.core.dsl.extension/nodeLLMRequestMultiple|nodeLLMRequestMultiple@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMRequestStreaming(kotlin/String? = ..., ai.grazie.code.prompt.structure/StructuredDataDefinition? = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/String, kotlinx.coroutines.flow/Flow<kotlin/String>> // ai.grazie.code.agents.core.dsl.extension/nodeLLMRequestStreaming|nodeLLMRequestStreaming@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;ai.grazie.code.prompt.structure.StructuredDataDefinition?){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMSendMessageForceOneTool(kotlin/String? = ..., ai.grazie.code.agents.core.tools/Tool<*, *>): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/String, ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.dsl.extension/nodeLLMSendMessageForceOneTool|nodeLLMSendMessageForceOneTool@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;ai.grazie.code.agents.core.tools.Tool<*,*>){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMSendMessageForceOneTool(kotlin/String? = ..., ai.grazie.code.agents.core.tools/ToolDescriptor): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/String, ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.dsl.extension/nodeLLMSendMessageForceOneTool|nodeLLMSendMessageForceOneTool@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;ai.grazie.code.agents.core.tools.ToolDescriptor){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMSendMessageOnlyCallingTools(kotlin/String? = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/String, ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.dsl.extension/nodeLLMSendMessageOnlyCallingTools|nodeLLMSendMessageOnlyCallingTools@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMSendMultipleToolResults(kotlin/String? = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin.collections/List<ai.grazie.code.agents.core.environment/ReceivedToolResult>, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Response>> // ai.grazie.code.agents.core.dsl.extension/nodeLLMSendMultipleToolResults|nodeLLMSendMultipleToolResults@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMSendToolResult(kotlin/String? = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<ai.grazie.code.agents.core.environment/ReceivedToolResult, ai.jetbrains.code.prompt.message/Message.Response> // ai.grazie.code.agents.core.dsl.extension/nodeLLMSendToolResult|nodeLLMSendToolResult@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?){}[0]
final fun (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeUpdatePrompt(kotlin/String? = ..., kotlin/Function1<ai.jetbrains.code.prompt.dsl/PromptBuilder, kotlin/Unit>): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/Unit, kotlin/Unit> // ai.grazie.code.agents.core.dsl.extension/nodeUpdatePrompt|nodeUpdatePrompt@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;kotlin.Function1<ai.jetbrains.code.prompt.dsl.PromptBuilder,kotlin.Unit>){}[0]
final fun (ai.grazie.code.agents.core.model.message/AIAgentEnvironmentToolResultToAgentContent).ai.grazie.code.agents.core.environment/toResult(): ai.grazie.code.agents.core.environment/ReceivedToolResult // ai.grazie.code.agents.core.environment/toResult|toResult@ai.grazie.code.agents.core.model.message.AIAgentEnvironmentToolResultToAgentContent(){}[0]
final fun (ai.grazie.code.agents.core.model.message/EnvironmentToolResultToAgentContent).ai.grazie.code.agents.core.environment/toResult(): ai.grazie.code.agents.core.environment/ReceivedToolResult // ai.grazie.code.agents.core.environment/toResult|toResult@ai.grazie.code.agents.core.model.message.EnvironmentToolResultToAgentContent(){}[0]
final fun (ai.jetbrains.code.prompt.dsl/PromptBuilder.ToolMessageBuilder).ai.grazie.code.agents.core.environment/result(ai.grazie.code.agents.core.environment/ReceivedToolResult) // ai.grazie.code.agents.core.environment/result|result@ai.jetbrains.code.prompt.dsl.PromptBuilder.ToolMessageBuilder(ai.grazie.code.agents.core.environment.ReceivedToolResult){}[0]
final fun (kotlin/Throwable).ai.grazie.code.agents.core.feature.model/toAgentError(): ai.grazie.code.agents.core.feature.model/AIAgentError // ai.grazie.code.agents.core.feature.model/toAgentError|toAgentError@kotlin.Throwable(){}[0]
final fun <#A: ai.grazie.code.agents.core.tools/ToolResult> (ai.grazie.code.agents.core.environment/ReceivedToolResult).ai.grazie.code.agents.core.environment/toSafeResult(): ai.grazie.code.agents.core.environment/SafeTool.Result<#A> // ai.grazie.code.agents.core.environment/toSafeResult|toSafeResult@ai.grazie.code.agents.core.environment.ReceivedToolResult(){0§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onAssistantMessage(kotlin.coroutines/SuspendFunction1<ai.jetbrains.code.prompt.message/Message.Assistant, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, kotlin/String, #C> // ai.grazie.code.agents.core.dsl.extension/onAssistantMessage|onAssistantMessage@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(kotlin.coroutines.SuspendFunction1<ai.jetbrains.code.prompt.message.Message.Assistant,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onMultipleToolCalls(kotlin.coroutines/SuspendFunction1<kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Tool.Call>, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, kotlin.collections/List<ai.jetbrains.code.prompt.message/Message.Tool.Call>, #C> // ai.grazie.code.agents.core.dsl.extension/onMultipleToolCalls|onMultipleToolCalls@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(kotlin.coroutines.SuspendFunction1<kotlin.collections.List<ai.jetbrains.code.prompt.message.Message.Tool.Call>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onMultipleToolResults(kotlin.coroutines/SuspendFunction1<kotlin.collections/List<ai.grazie.code.agents.core.environment/ReceivedToolResult>, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, kotlin.collections/List<ai.grazie.code.agents.core.environment/ReceivedToolResult>, #C> // ai.grazie.code.agents.core.dsl.extension/onMultipleToolResults|onMultipleToolResults@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(kotlin.coroutines.SuspendFunction1<kotlin.collections.List<ai.grazie.code.agents.core.environment.ReceivedToolResult>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onToolCall(ai.grazie.code.agents.core.tools/Tool<*, *>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.jetbrains.code.prompt.message/Message.Tool.Call, #C> // ai.grazie.code.agents.core.dsl.extension/onToolCall|onToolCall@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(ai.grazie.code.agents.core.tools.Tool<*,*>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onToolCall(kotlin.coroutines/SuspendFunction1<ai.jetbrains.code.prompt.message/Message.Tool.Call, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.jetbrains.code.prompt.message/Message.Tool.Call, #C> // ai.grazie.code.agents.core.dsl.extension/onToolCall|onToolCall@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(kotlin.coroutines.SuspendFunction1<ai.jetbrains.code.prompt.message.Message.Tool.Call,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onToolNotCalled(ai.grazie.code.agents.core.tools/Tool<*, *>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.jetbrains.code.prompt.message/Message.Tool.Call, #C> // ai.grazie.code.agents.core.dsl.extension/onToolNotCalled|onToolNotCalled@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(ai.grazie.code.agents.core.tools.Tool<*,*>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<*, #A>).ai.grazie.code.agents.core.dsl.builder/forwardTo(ai.grazie.code.agents.core.agent.entity/AIAgentNodeBase<#B, *>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #A, #B> // ai.grazie.code.agents.core.dsl.builder/forwardTo|forwardTo@ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<*,0:0>(ai.grazie.code.agents.core.agent.entity.AIAgentNodeBase<0:1,*>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeDoNothing(kotlin/String? = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<#A, #A> // ai.grazie.code.agents.core.dsl.extension/nodeDoNothing|nodeDoNothing@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMCompressHistory(kotlin/String? = ..., ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy = ..., kotlin/Boolean = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<#A, #A> // ai.grazie.code.agents.core.dsl.extension/nodeLLMCompressHistory|nodeLLMCompressHistory@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;ai.grazie.code.agents.core.dsl.extension.HistoryCompressionStrategy;kotlin.Boolean){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMRequestStreaming(kotlin/String? = ..., ai.grazie.code.prompt.structure/StructuredDataDefinition? = ..., kotlin.coroutines/SuspendFunction1<kotlinx.coroutines.flow/Flow<kotlin/String>, kotlinx.coroutines.flow/Flow<#A>>): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/String, kotlinx.coroutines.flow/Flow<#A>> // ai.grazie.code.agents.core.dsl.extension/nodeLLMRequestStreaming|nodeLLMRequestStreaming@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;ai.grazie.code.prompt.structure.StructuredDataDefinition?;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.flow.Flow<kotlin.String>,kotlinx.coroutines.flow.Flow<0:0>>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeLLMRequestStructured(kotlin/String? = ..., ai.grazie.code.prompt.structure/StructuredData<#A>, kotlin/Int, ai.jetbrains.code.prompt.llm/LLModel): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<kotlin/String, kotlin/Result<ai.grazie.code.prompt.structure/StructuredResponse<#A>>> // ai.grazie.code.agents.core.dsl.extension/nodeLLMRequestStructured|nodeLLMRequestStructured@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;ai.grazie.code.prompt.structure.StructuredData<0:0>;kotlin.Int;ai.jetbrains.code.prompt.llm.LLModel){0§<kotlin.Any?>}[0]
final fun ai.grazie.code.agents.core.dsl.builder/strategy(kotlin/String, ai.grazie.code.agents.core.agent.entity/ToolSelectionStrategy = ..., kotlin/Function1<ai.grazie.code.agents.core.dsl.builder/AIAgentStrategyBuilder, kotlin/Unit>): ai.grazie.code.agents.core.agent.entity/AIAgentStrategy // ai.grazie.code.agents.core.dsl.builder/strategy|strategy(kotlin.String;ai.grazie.code.agents.core.agent.entity.ToolSelectionStrategy;kotlin.Function1<ai.grazie.code.agents.core.dsl.builder.AIAgentStrategyBuilder,kotlin.Unit>){}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: reified ai.grazie.code.agents.core.tools/Tool.Args> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onToolCall(ai.grazie.code.agents.core.tools/Tool<#D, *>, crossinline kotlin.coroutines/SuspendFunction1<#D, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.jetbrains.code.prompt.message/Message.Tool.Call, #C> // ai.grazie.code.agents.core.dsl.extension/onToolCall|onToolCall@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(ai.grazie.code.agents.core.tools.Tool<0:3,*>;kotlin.coroutines.SuspendFunction1<0:3,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<ai.grazie.code.agents.core.tools.Tool.Args>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: reified ai.grazie.code.agents.core.tools/ToolResult> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onToolResult(ai.grazie.code.agents.core.tools/Tool<*, #D>, crossinline kotlin.coroutines/SuspendFunction1<ai.grazie.code.agents.core.environment/SafeTool.Result<#D>, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.grazie.code.agents.core.environment/ReceivedToolResult, #C> // ai.grazie.code.agents.core.dsl.extension/onToolResult|onToolResult@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(ai.grazie.code.agents.core.tools.Tool<*,0:3>;kotlin.coroutines.SuspendFunction1<ai.grazie.code.agents.core.environment.SafeTool.Result<0:3>,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: reified kotlin/Any> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #B, #C>).ai.grazie.code.agents.core.dsl.extension/onIsInstance(kotlin.reflect/KClass<#D>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, #D, #C> // ai.grazie.code.agents.core.dsl.extension/onIsInstance|onIsInstance@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,0:1,0:2>(kotlin.reflect.KClass<0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: reified ai.grazie.code.agents.core.tools/ToolResult> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.grazie.code.agents.core.environment/SafeTool.Result<#C>, #B>).ai.grazie.code.agents.core.dsl.extension/onFailure(crossinline kotlin.coroutines/SuspendFunction1<kotlin/String, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.grazie.code.agents.core.environment/SafeTool.Result.Failure<#C>, #B> // ai.grazie.code.agents.core.dsl.extension/onFailure|onFailure@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,ai.grazie.code.agents.core.environment.SafeTool.Result<0:2>,0:1>(kotlin.coroutines.SuspendFunction1<kotlin.String,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: reified ai.grazie.code.agents.core.tools/ToolResult> (ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.grazie.code.agents.core.environment/SafeTool.Result<#C>, #B>).ai.grazie.code.agents.core.dsl.extension/onSuccessful(crossinline kotlin.coroutines/SuspendFunction1<#C, kotlin/Boolean>): ai.grazie.code.agents.core.dsl.builder/AIAgentEdgeBuilderIntermediate<#A, ai.grazie.code.agents.core.environment/SafeTool.Result.Success<#C>, #B> // ai.grazie.code.agents.core.dsl.extension/onSuccessful|onSuccessful@ai.grazie.code.agents.core.dsl.builder.AIAgentEdgeBuilderIntermediate<0:0,ai.grazie.code.agents.core.environment.SafeTool.Result<0:2>,0:1>(kotlin.coroutines.SuspendFunction1<0:2,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
final inline fun <#A: reified ai.grazie.code.agents.core.tools/Tool.Args, #B: reified ai.grazie.code.agents.core.tools/ToolResult> (ai.grazie.code.agents.core.dsl.builder/AIAgentSubgraphBuilderBase<*, *>).ai.grazie.code.agents.core.dsl.extension/nodeExecuteSingleTool(kotlin/String? = ..., ai.grazie.code.agents.core.tools/Tool<#A, #B>, kotlin/Boolean = ...): ai.grazie.code.agents.core.dsl.builder/AIAgentNodeDelegateBase<#A, ai.grazie.code.agents.core.environment/SafeTool.Result<#B>> // ai.grazie.code.agents.core.dsl.extension/nodeExecuteSingleTool|nodeExecuteSingleTool@ai.grazie.code.agents.core.dsl.builder.AIAgentSubgraphBuilderBase<*,*>(kotlin.String?;ai.grazie.code.agents.core.tools.Tool<0:0,0:1>;kotlin.Boolean){0§<ai.grazie.code.agents.core.tools.Tool.Args>;1§<ai.grazie.code.agents.core.tools.ToolResult>}[0]
final inline fun <#A: reified kotlin/Any> ai.grazie.code.agents.core.agent.entity/createStorageKey(kotlin/String): ai.grazie.code.agents.core.agent.entity/AIAgentStorageKey<#A> // ai.grazie.code.agents.core.agent.entity/createStorageKey|createStorageKey(kotlin.String){0§<kotlin.Any>}[0]
final suspend fun (ai.grazie.code.agents.core.agent.entity/AIAgentLLMWriteSession).ai.grazie.code.agents.core.dsl.extension/replaceHistoryWithTLDR(ai.grazie.code.agents.core.dsl.extension/HistoryCompressionStrategy = ..., kotlin/Boolean = ...) // ai.grazie.code.agents.core.dsl.extension/replaceHistoryWithTLDR|replaceHistoryWithTLDR@ai.grazie.code.agents.core.agent.entity.AIAgentLLMWriteSession(ai.grazie.code.agents.core.dsl.extension.HistoryCompressionStrategy;kotlin.Boolean){}[0]
final suspend fun (ai.grazie.code.agents.core.environment/AIAgentEnvironment).ai.grazie.code.agents.core.environment/executeTool(ai.jetbrains.code.prompt.message/Message.Tool.Call): ai.grazie.code.agents.core.environment/ReceivedToolResult // ai.grazie.code.agents.core.environment/executeTool|executeTool@ai.grazie.code.agents.core.environment.AIAgentEnvironment(ai.jetbrains.code.prompt.message.Message.Tool.Call){}[0]
