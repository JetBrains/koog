# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Checks

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:

jobs:
  compilation:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Configure Git
        run: |
          git config --global core.autocrlf input
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Assemble with Gradle Wrapper
        run: ./gradlew assemble

      - name: TestClasses with Gradle Wrapper
        run: ./gradlew jvmTestClasses jsTestClasses

  tests:

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Configure Git
        run: |
          git config --global core.autocrlf input
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: JvmTest with Gradle Wrapper and Kover coverage
        if: matrix.os == 'ubuntu-latest'
        run: ./gradlew jvmTest :koverBinaryReport --continue

      - name: JvmTest with Gradle Wrapper
        if: matrix.os != 'ubuntu-latest'
        run: ./gradlew jvmTest --continue

      - name: Create coverage-data directory and copy contents
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p .qodana/code-coverage
          cp -R build/reports/kover/* .qodana/code-coverage/

      - name: Archive coverage data
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: gradle-coverage-data.zip
          path: .qodana/code-coverage

      - name: Collect reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.os }}
          path: |
            **/build/reports/
  qodana:
    needs: [tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
          fetch-depth: 0  # a full history is required for pull request analysis

      # Add Java setup step
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Popular OpenJDK distribution

      # Download the coverage data artifact
      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          name: gradle-coverage-data.zip
          path: .qodana/code-coverage

      - name: 'Qodana Scan'
        uses: JetBrains/qodana-action@v2025.1
        with:
          pr-mode: false
          args: --apply-fixes,--baseline,qodana.sarif.json
          push-fixes: branch
          use-caches: 'false'
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_1399872884 }}
          QODANA_ENDPOINT: 'https://qodana.cloud'